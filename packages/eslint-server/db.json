{
    "name": "@virtuallyunknown/eslint-server",
    "dependencies": [
        {
            "@stylistic/eslint-plugin": "1.5.4"
        },
        {
            "@typescript-eslint/eslint-plugin": "6.19.0"
        },
        {
            "eslint-plugin-react-hooks": "4.6.0"
        },
        {
            "eslint-plugin-react": "7.33.2"
        },
        {
            "eslint-plugin-unicorn": "50.0.1"
        },
        {
            "eslint": "8.56.0"
        }
    ],
    "rules": [
        {
            "name": "accessor-pairs",
            "description": "Enforce getter and setter pairs in objects and classes",
            "url": "https://eslint.org/docs/latest/rules/accessor-pairs",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "getWithoutSet": {
                            "type": "boolean",
                            "default": false
                        },
                        "setWithoutGet": {
                            "type": "boolean",
                            "default": true
                        },
                        "enforceForClassMembers": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "array-bracket-newline",
            "description": "Enforce linebreaks after opening and before closing array brackets",
            "url": "https://eslint.org/docs/latest/rules/array-bracket-newline",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never",
                                "consistent"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "multiline": {
                                    "type": "boolean"
                                },
                                "minItems": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "array-bracket-spacing",
            "description": "Enforce consistent spacing inside array brackets",
            "url": "https://eslint.org/docs/latest/rules/array-bracket-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "singleValue": {
                            "type": "boolean"
                        },
                        "objectsInArrays": {
                            "type": "boolean"
                        },
                        "arraysInArrays": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "array-callback-return",
            "description": "Enforce `return` statements in callbacks of array methods",
            "url": "https://eslint.org/docs/latest/rules/array-callback-return",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowImplicit": {
                            "type": "boolean",
                            "default": false
                        },
                        "checkForEach": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowVoid": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "array-element-newline",
            "description": "Enforce line breaks after each array element",
            "url": "https://eslint.org/docs/latest/rules/array-element-newline",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "definitions": {
                    "basicConfig": {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never",
                                    "consistent"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "multiline": {
                                        "type": "boolean"
                                    },
                                    "minItems": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                },
                "type": "array",
                "items": [
                    {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/basicConfig"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ArrayExpression": {
                                        "$ref": "#/definitions/basicConfig"
                                    },
                                    "ArrayPattern": {
                                        "$ref": "#/definitions/basicConfig"
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "arrow-body-style",
            "description": "Require braces around arrow function bodies",
            "url": "https://eslint.org/docs/latest/rules/arrow-body-style",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "as-needed"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "requireReturnForObjectLiteral": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "arrow-parens",
            "description": "Require parentheses around arrow function arguments",
            "url": "https://eslint.org/docs/latest/rules/arrow-parens",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "as-needed"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "requireForBlockBody": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "arrow-spacing",
            "description": "Enforce consistent spacing before and after the arrow in arrow functions",
            "url": "https://eslint.org/docs/latest/rules/arrow-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": true
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "block-scoped-var",
            "description": "Enforce the use of variables within the scope they are defined",
            "url": "https://eslint.org/docs/latest/rules/block-scoped-var",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "block-spacing",
            "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
            "url": "https://eslint.org/docs/latest/rules/block-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "brace-style",
            "description": "Enforce consistent brace style for blocks",
            "url": "https://eslint.org/docs/latest/rules/brace-style",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "1tbs",
                        "stroustrup",
                        "allman"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "allowSingleLine": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "callback-return",
            "description": "Require `return` statements after callbacks",
            "url": "https://eslint.org/docs/latest/rules/callback-return",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "camelcase",
            "description": "Enforce camelcase naming convention",
            "url": "https://eslint.org/docs/latest/rules/camelcase",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreDestructuring": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreImports": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreGlobals": {
                            "type": "boolean",
                            "default": false
                        },
                        "properties": {
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        "allow": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                }
                            ],
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "capitalized-comments",
            "description": "Enforce or disallow capitalization of the first letter of a comment",
            "url": "https://eslint.org/docs/latest/rules/capitalized-comments",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "oneOf": [
                        {
                            "type": "object",
                            "properties": {
                                "ignorePattern": {
                                    "type": "string"
                                },
                                "ignoreInlineComments": {
                                    "type": "boolean"
                                },
                                "ignoreConsecutiveComments": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "line": {
                                    "type": "object",
                                    "properties": {
                                        "ignorePattern": {
                                            "type": "string"
                                        },
                                        "ignoreInlineComments": {
                                            "type": "boolean"
                                        },
                                        "ignoreConsecutiveComments": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "block": {
                                    "type": "object",
                                    "properties": {
                                        "ignorePattern": {
                                            "type": "string"
                                        },
                                        "ignoreInlineComments": {
                                            "type": "boolean"
                                        },
                                        "ignoreConsecutiveComments": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "class-methods-use-this",
            "description": "Enforce that class methods utilize `this`",
            "url": "https://eslint.org/docs/latest/rules/class-methods-use-this",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptMethods": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "enforceForClassFields": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "comma-dangle",
            "description": "Require or disallow trailing commas",
            "url": "https://eslint.org/docs/latest/rules/comma-dangle",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "definitions": {
                    "value": {
                        "enum": [
                            "always-multiline",
                            "always",
                            "never",
                            "only-multiline"
                        ]
                    },
                    "valueWithIgnore": {
                        "enum": [
                            "always-multiline",
                            "always",
                            "ignore",
                            "never",
                            "only-multiline"
                        ]
                    }
                },
                "type": "array",
                "items": [
                    {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/value"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "arrays": {
                                        "$ref": "#/definitions/valueWithIgnore"
                                    },
                                    "objects": {
                                        "$ref": "#/definitions/valueWithIgnore"
                                    },
                                    "imports": {
                                        "$ref": "#/definitions/valueWithIgnore"
                                    },
                                    "exports": {
                                        "$ref": "#/definitions/valueWithIgnore"
                                    },
                                    "functions": {
                                        "$ref": "#/definitions/valueWithIgnore"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "additionalItems": false
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "comma-spacing",
            "description": "Enforce consistent spacing before and after commas",
            "url": "https://eslint.org/docs/latest/rules/comma-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": false
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "comma-style",
            "description": "Enforce consistent comma style",
            "url": "https://eslint.org/docs/latest/rules/comma-style",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "first",
                        "last"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "complexity",
            "description": "Enforce a maximum cyclomatic complexity allowed in a program",
            "url": "https://eslint.org/docs/latest/rules/complexity",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "max": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "computed-property-spacing",
            "description": "Enforce consistent spacing inside computed property brackets",
            "url": "https://eslint.org/docs/latest/rules/computed-property-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "enforceForClassMembers": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "consistent-return",
            "description": "Require `return` statements to either always or never specify values",
            "url": "https://eslint.org/docs/latest/rules/consistent-return",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "treatUndefinedAsUnspecified": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "consistent-this",
            "description": "Enforce consistent naming when capturing the current execution context",
            "url": "https://eslint.org/docs/latest/rules/consistent-this",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "items": {
                    "type": "string",
                    "minLength": 1
                },
                "uniqueItems": true
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "constructor-super",
            "description": "Require `super()` calls in constructors",
            "url": "https://eslint.org/docs/latest/rules/constructor-super",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:39:38.271Z",
            "note": null
        },
        {
            "name": "curly",
            "description": "Enforce consistent brace style for all control statements",
            "url": "https://eslint.org/docs/latest/rules/curly",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "all"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "multi",
                                    "multi-line",
                                    "multi-or-nest"
                                ]
                            },
                            {
                                "enum": [
                                    "consistent"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "default-case",
            "description": "Require `default` cases in `switch` statements",
            "url": "https://eslint.org/docs/latest/rules/default-case",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "commentPattern": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "default-case-last",
            "description": "Enforce default clauses in switch statements to be last",
            "url": "https://eslint.org/docs/latest/rules/default-case-last",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "default-param-last",
            "description": "Enforce default parameters to be last",
            "url": "https://eslint.org/docs/latest/rules/default-param-last",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "dot-location",
            "description": "Enforce consistent newlines before and after dots",
            "url": "https://eslint.org/docs/latest/rules/dot-location",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "object",
                        "property"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "dot-notation",
            "description": "Enforce dot notation whenever possible",
            "url": "https://eslint.org/docs/latest/rules/dot-notation",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowKeywords": {
                            "type": "boolean",
                            "default": true
                        },
                        "allowPattern": {
                            "type": "string",
                            "default": ""
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "eol-last",
            "description": "Require or disallow newline at the end of files",
            "url": "https://eslint.org/docs/latest/rules/eol-last",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never",
                        "unix",
                        "windows"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "eqeqeq",
            "description": "Require the use of `===` and `!==`",
            "url": "https://eslint.org/docs/latest/rules/eqeqeq",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "null": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "additionalItems": false
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "smart",
                                    "allow-null"
                                ]
                            }
                        ],
                        "additionalItems": false
                    }
                ]
            },
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                "always"
            ],
            "updatedAt": "2024-01-14T14:29:26.902Z",
            "note": null
        },
        {
            "name": "for-direction",
            "description": "Enforce \"for\" loop update clause moving the counter in the right direction",
            "url": "https://eslint.org/docs/latest/rules/for-direction",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:42:23.091Z",
            "note": null
        },
        {
            "name": "func-call-spacing",
            "description": "Require or disallow spacing between function identifiers and their invocations",
            "url": "https://eslint.org/docs/latest/rules/func-call-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "never"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "allowNewlines": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "func-name-matching",
            "description": "Require function names to match the name of the variable or property to which they are assigned",
            "url": "https://eslint.org/docs/latest/rules/func-name-matching",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "additionalItems": false,
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "considerPropertyDescriptor": {
                                        "type": "boolean"
                                    },
                                    "includeCommonJSModuleExports": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    {
                        "type": "array",
                        "additionalItems": false,
                        "items": [
                            {
                                "type": "object",
                                "properties": {
                                    "considerPropertyDescriptor": {
                                        "type": "boolean"
                                    },
                                    "includeCommonJSModuleExports": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "func-names",
            "description": "Require or disallow named `function` expressions",
            "url": "https://eslint.org/docs/latest/rules/func-names",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "definitions": {
                    "value": {
                        "enum": [
                            "always",
                            "as-needed",
                            "never"
                        ]
                    }
                },
                "items": [
                    {
                        "$ref": "#/definitions/value"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "generators": {
                                "$ref": "#/definitions/value"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "func-style",
            "description": "Enforce the consistent use of either `function` declarations or expressions",
            "url": "https://eslint.org/docs/latest/rules/func-style",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "declaration",
                        "expression"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "allowArrowFunctions": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "declaration",
                {
                    "allowArrowFunctions": true
                }
            ],
            "updatedAt": "2024-01-14T00:49:34.242Z",
            "note": null
        },
        {
            "name": "function-call-argument-newline",
            "description": "Enforce line breaks between arguments of a function call",
            "url": "https://eslint.org/docs/latest/rules/function-call-argument-newline",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never",
                        "consistent"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "function-paren-newline",
            "description": "Enforce consistent line breaks inside function parentheses",
            "url": "https://eslint.org/docs/latest/rules/function-paren-newline",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never",
                                "consistent",
                                "multiline",
                                "multiline-arguments"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "minItems": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "generator-star-spacing",
            "description": "Enforce consistent spacing around `*` operators in generator functions",
            "url": "https://eslint.org/docs/latest/rules/generator-star-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "before",
                                "after",
                                "both",
                                "neither"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "before": {
                                    "type": "boolean"
                                },
                                "after": {
                                    "type": "boolean"
                                },
                                "named": {
                                    "oneOf": [
                                        {
                                            "enum": [
                                                "before",
                                                "after",
                                                "both",
                                                "neither"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "before": {
                                                    "type": "boolean"
                                                },
                                                "after": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "anonymous": {
                                    "oneOf": [
                                        {
                                            "enum": [
                                                "before",
                                                "after",
                                                "both",
                                                "neither"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "before": {
                                                    "type": "boolean"
                                                },
                                                "after": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "method": {
                                    "oneOf": [
                                        {
                                            "enum": [
                                                "before",
                                                "after",
                                                "both",
                                                "neither"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "before": {
                                                    "type": "boolean"
                                                },
                                                "after": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "getter-return",
            "description": "Enforce `return` statements in getters",
            "url": "https://eslint.org/docs/latest/rules/getter-return",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowImplicit": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:36:46.123Z",
            "note": null
        },
        {
            "name": "global-require",
            "description": "Require `require()` calls to be placed at top-level module scope",
            "url": "https://eslint.org/docs/latest/rules/global-require",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "grouped-accessor-pairs",
            "description": "Require grouped accessor pairs in object literals and classes",
            "url": "https://eslint.org/docs/latest/rules/grouped-accessor-pairs",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "anyOrder",
                        "getBeforeSet",
                        "setBeforeGet"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "guard-for-in",
            "description": "Require `for-in` loops to include an `if` statement",
            "url": "https://eslint.org/docs/latest/rules/guard-for-in",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "handle-callback-err",
            "description": "Require error handling in callbacks",
            "url": "https://eslint.org/docs/latest/rules/handle-callback-err",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string"
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "id-blacklist",
            "description": "Disallow specified identifiers",
            "url": "https://eslint.org/docs/latest/rules/id-blacklist",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "id-denylist"
            ],
            "schema": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "uniqueItems": true
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "id-denylist",
            "description": "Disallow specified identifiers",
            "url": "https://eslint.org/docs/latest/rules/id-denylist",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "uniqueItems": true
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "id-length",
            "description": "Enforce minimum and maximum identifier lengths",
            "url": "https://eslint.org/docs/latest/rules/id-length",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "min": {
                            "type": "integer",
                            "default": 2
                        },
                        "max": {
                            "type": "integer"
                        },
                        "exceptions": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        },
                        "exceptionPatterns": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        },
                        "properties": {
                            "enum": [
                                "always",
                                "never"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "id-match",
            "description": "Require identifiers to match a specified regular expression",
            "url": "https://eslint.org/docs/latest/rules/id-match",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string"
                },
                {
                    "type": "object",
                    "properties": {
                        "properties": {
                            "type": "boolean",
                            "default": false
                        },
                        "classFields": {
                            "type": "boolean",
                            "default": false
                        },
                        "onlyDeclarations": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreDestructuring": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "implicit-arrow-linebreak",
            "description": "Enforce the location of arrow function bodies",
            "url": "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "beside",
                        "below"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "indent",
            "description": "Enforce consistent indentation",
            "url": "https://eslint.org/docs/latest/rules/indent",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "tab"
                            ]
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "SwitchCase": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        },
                        "VariableDeclarator": {
                            "oneOf": [
                                {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "var": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        },
                                        "let": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        },
                                        "const": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        "outerIIFEBody": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "MemberExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "FunctionDeclaration": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "FunctionExpression": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "StaticBlock": {
                            "type": "object",
                            "properties": {
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "CallExpression": {
                            "type": "object",
                            "properties": {
                                "arguments": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        "ArrayExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "ObjectExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "ImportDeclaration": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "flatTernaryExpressions": {
                            "type": "boolean",
                            "default": false
                        },
                        "offsetTernaryExpressions": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoredNodes": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "not": {
                                    "pattern": ":exit$"
                                }
                            }
                        },
                        "ignoreComments": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "indent-legacy",
            "description": "Enforce consistent indentation",
            "url": "https://eslint.org/docs/latest/rules/indent-legacy",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "indent"
            ],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "tab"
                            ]
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "SwitchCase": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "VariableDeclarator": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "var": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "let": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "const": {
                                            "type": "integer",
                                            "minimum": 0
                                        }
                                    }
                                }
                            ]
                        },
                        "outerIIFEBody": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "MemberExpression": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "FunctionDeclaration": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            }
                        },
                        "FunctionExpression": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            }
                        },
                        "CallExpression": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first"
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        "ArrayExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first"
                                    ]
                                }
                            ]
                        },
                        "ObjectExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first"
                                    ]
                                }
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "init-declarations",
            "description": "Require or disallow initialization in variable declarations",
            "url": "https://eslint.org/docs/latest/rules/init-declarations",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ignoreForLoopInit": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "jsx-quotes",
            "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
            "url": "https://eslint.org/docs/latest/rules/jsx-quotes",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "prefer-single",
                        "prefer-double"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "key-spacing",
            "description": "Enforce consistent spacing between keys and values in object literal properties",
            "url": "https://eslint.org/docs/latest/rules/key-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "align": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "mode": {
                                                    "enum": [
                                                        "strict",
                                                        "minimum"
                                                    ]
                                                },
                                                "on": {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ]
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "afterColon": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "mode": {
                                    "enum": [
                                        "strict",
                                        "minimum"
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "afterColon": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "multiLine": {
                                    "type": "object",
                                    "properties": {
                                        "align": {
                                            "anyOf": [
                                                {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ]
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "mode": {
                                                            "enum": [
                                                                "strict",
                                                                "minimum"
                                                            ]
                                                        },
                                                        "on": {
                                                            "enum": [
                                                                "colon",
                                                                "value"
                                                            ]
                                                        },
                                                        "beforeColon": {
                                                            "type": "boolean"
                                                        },
                                                        "afterColon": {
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        },
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "multiLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "align": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "on": {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "keyword-spacing",
            "description": "Enforce consistent spacing before and after keywords",
            "url": "https://eslint.org/docs/latest/rules/keyword-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": true
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "abstract": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "as": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "async": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "await": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "boolean": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "break": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "byte": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "case": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "catch": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "char": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "class": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "const": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "continue": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "debugger": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "default": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "delete": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "do": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "double": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "else": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "enum": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "export": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "extends": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "false": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "final": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "finally": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "float": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "for": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "from": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "function": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "get": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "goto": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "if": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "implements": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "import": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "in": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "instanceof": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "int": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "interface": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "let": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "long": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "native": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "new": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "null": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "of": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "package": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "private": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "protected": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "public": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "return": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "set": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "short": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "static": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "super": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "switch": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "synchronized": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "this": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "throw": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "throws": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "transient": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "true": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "try": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "typeof": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "var": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "void": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "volatile": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "while": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "with": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "yield": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "line-comment-position",
            "description": "Enforce position of line comments",
            "url": "https://eslint.org/docs/latest/rules/line-comment-position",
            "library": "eslint",
            "type": "layout",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "above",
                                "beside"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "position": {
                                    "enum": [
                                        "above",
                                        "beside"
                                    ]
                                },
                                "ignorePattern": {
                                    "type": "string"
                                },
                                "applyDefaultPatterns": {
                                    "type": "boolean"
                                },
                                "applyDefaultIgnorePatterns": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "linebreak-style",
            "description": "Enforce consistent linebreak style",
            "url": "https://eslint.org/docs/latest/rules/linebreak-style",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "unix",
                        "windows"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "lines-around-comment",
            "description": "Require empty lines around comments",
            "url": "https://eslint.org/docs/latest/rules/lines-around-comment",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "beforeBlockComment": {
                            "type": "boolean",
                            "default": true
                        },
                        "afterBlockComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "beforeLineComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "afterLineComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowBlockStart": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowBlockEnd": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowClassStart": {
                            "type": "boolean"
                        },
                        "allowClassEnd": {
                            "type": "boolean"
                        },
                        "allowObjectStart": {
                            "type": "boolean"
                        },
                        "allowObjectEnd": {
                            "type": "boolean"
                        },
                        "allowArrayStart": {
                            "type": "boolean"
                        },
                        "allowArrayEnd": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "applyDefaultIgnorePatterns": {
                            "type": "boolean"
                        },
                        "afterHashbangComment": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "lines-around-directive",
            "description": "Require or disallow newlines around directives",
            "url": "https://eslint.org/docs/latest/rules/lines-around-directive",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "padding-line-between-statements"
            ],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "before": {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                "after": {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 2
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "lines-between-class-members",
            "description": "Require or disallow an empty line between class members",
            "url": "https://eslint.org/docs/latest/rules/lines-between-class-members",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "enforce": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "blankLine": {
                                                "enum": [
                                                    "always",
                                                    "never"
                                                ]
                                            },
                                            "prev": {
                                                "enum": [
                                                    "method",
                                                    "field",
                                                    "*"
                                                ]
                                            },
                                            "next": {
                                                "enum": [
                                                    "method",
                                                    "field",
                                                    "*"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "blankLine",
                                            "prev",
                                            "next"
                                        ]
                                    },
                                    "minItems": 1
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "enforce"
                            ]
                        },
                        {
                            "enum": [
                                "always",
                                "never"
                            ]
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptAfterSingleLine": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "logical-assignment-operators",
            "description": "Require or disallow logical assignment operator shorthand",
            "url": "https://eslint.org/docs/latest/rules/logical-assignment-operators",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "oneOf": [
                    {
                        "items": [
                            {
                                "const": "always"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "enforceForIfStatements": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    },
                    {
                        "items": [
                            {
                                "const": "never"
                            }
                        ],
                        "minItems": 1,
                        "maxItems": 1
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-classes-per-file",
            "description": "Enforce a maximum number of classes per file",
            "url": "https://eslint.org/docs/latest/rules/max-classes-per-file",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 1
                        },
                        {
                            "type": "object",
                            "properties": {
                                "ignoreExpressions": {
                                    "type": "boolean"
                                },
                                "max": {
                                    "type": "integer",
                                    "minimum": 1
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-depth",
            "description": "Enforce a maximum depth that blocks can be nested",
            "url": "https://eslint.org/docs/latest/rules/max-depth",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "max": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-len",
            "description": "Enforce a maximum line length",
            "url": "https://eslint.org/docs/latest/rules/max-len",
            "library": "eslint",
            "type": "layout",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "comments": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "tabWidth": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "ignorePattern": {
                                    "type": "string"
                                },
                                "ignoreComments": {
                                    "type": "boolean"
                                },
                                "ignoreStrings": {
                                    "type": "boolean"
                                },
                                "ignoreUrls": {
                                    "type": "boolean"
                                },
                                "ignoreTemplateLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreRegExpLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreTrailingComments": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "comments": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "tabWidth": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "ignorePattern": {
                                    "type": "string"
                                },
                                "ignoreComments": {
                                    "type": "boolean"
                                },
                                "ignoreStrings": {
                                    "type": "boolean"
                                },
                                "ignoreUrls": {
                                    "type": "boolean"
                                },
                                "ignoreTemplateLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreRegExpLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreTrailingComments": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "comments": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "tabWidth": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "ignoreComments": {
                            "type": "boolean"
                        },
                        "ignoreStrings": {
                            "type": "boolean"
                        },
                        "ignoreUrls": {
                            "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                            "type": "boolean"
                        },
                        "ignoreRegExpLiterals": {
                            "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-lines",
            "description": "Enforce a maximum number of lines per file",
            "url": "https://eslint.org/docs/latest/rules/max-lines",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "object",
                            "properties": {
                                "max": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "skipComments": {
                                    "type": "boolean"
                                },
                                "skipBlankLines": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-lines-per-function",
            "description": "Enforce a maximum number of lines of code in a function",
            "url": "https://eslint.org/docs/latest/rules/max-lines-per-function",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "object",
                            "properties": {
                                "max": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "skipComments": {
                                    "type": "boolean"
                                },
                                "skipBlankLines": {
                                    "type": "boolean"
                                },
                                "IIFEs": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "integer",
                            "minimum": 1
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-nested-callbacks",
            "description": "Enforce a maximum depth that callbacks can be nested",
            "url": "https://eslint.org/docs/latest/rules/max-nested-callbacks",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "max": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-params",
            "description": "Enforce a maximum number of parameters in function definitions",
            "url": "https://eslint.org/docs/latest/rules/max-params",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "max": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-statements",
            "description": "Enforce a maximum number of statements allowed in function blocks",
            "url": "https://eslint.org/docs/latest/rules/max-statements",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "max": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "ignoreTopLevelFunctions": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "max-statements-per-line",
            "description": "Enforce a maximum number of statements allowed per line",
            "url": "https://eslint.org/docs/latest/rules/max-statements-per-line",
            "library": "eslint",
            "type": "layout",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "minimum": 1,
                            "default": 1
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "multiline-comment-style",
            "description": "Enforce a particular style for multiline comments",
            "url": "https://eslint.org/docs/latest/rules/multiline-comment-style",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "starred-block",
                                    "bare-block"
                                ]
                            }
                        ],
                        "additionalItems": false
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "separate-lines"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "checkJSDoc": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "additionalItems": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "multiline-ternary",
            "description": "Enforce newlines between operands of ternary expressions",
            "url": "https://eslint.org/docs/latest/rules/multiline-ternary",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "always-multiline",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "new-cap",
            "description": "Require constructor names to begin with a capital letter",
            "url": "https://eslint.org/docs/latest/rules/new-cap",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "newIsCap": {
                            "type": "boolean",
                            "default": true
                        },
                        "capIsNew": {
                            "type": "boolean",
                            "default": true
                        },
                        "newIsCapExceptions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "newIsCapExceptionPattern": {
                            "type": "string"
                        },
                        "capIsNewExceptions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "capIsNewExceptionPattern": {
                            "type": "string"
                        },
                        "properties": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "new-parens",
            "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
            "url": "https://eslint.org/docs/latest/rules/new-parens",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "newline-after-var",
            "description": "Require or disallow an empty line after variable declarations",
            "url": "https://eslint.org/docs/latest/rules/newline-after-var",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "padding-line-between-statements"
            ],
            "schema": [
                {
                    "enum": [
                        "never",
                        "always"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "newline-before-return",
            "description": "Require an empty line before `return` statements",
            "url": "https://eslint.org/docs/latest/rules/newline-before-return",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "padding-line-between-statements"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "newline-per-chained-call",
            "description": "Require a newline after each call in a method chain",
            "url": "https://eslint.org/docs/latest/rules/newline-per-chained-call",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreChainWithDepth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10,
                            "default": 2
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-alert",
            "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
            "url": "https://eslint.org/docs/latest/rules/no-alert",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-array-constructor",
            "description": "Disallow `Array` constructors",
            "url": "https://eslint.org/docs/latest/rules/no-array-constructor",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-async-promise-executor",
            "description": "Disallow using an async function as a Promise executor",
            "url": "https://eslint.org/docs/latest/rules/no-async-promise-executor",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T02:46:14.302Z",
            "note": null
        },
        {
            "name": "no-await-in-loop",
            "description": "Disallow `await` inside of loops",
            "url": "https://eslint.org/docs/latest/rules/no-await-in-loop",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-bitwise",
            "description": "Disallow bitwise operators",
            "url": "https://eslint.org/docs/latest/rules/no-bitwise",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "^",
                                    "|",
                                    "&",
                                    "<<",
                                    ">>",
                                    ">>>",
                                    "^=",
                                    "|=",
                                    "&=",
                                    "<<=",
                                    ">>=",
                                    ">>>=",
                                    "~"
                                ]
                            },
                            "uniqueItems": true
                        },
                        "int32Hint": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T02:47:35.839Z",
            "note": null
        },
        {
            "name": "no-buffer-constructor",
            "description": "Disallow use of the `Buffer()` constructor",
            "url": "https://eslint.org/docs/latest/rules/no-buffer-constructor",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-caller",
            "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
            "url": "https://eslint.org/docs/latest/rules/no-caller",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-case-declarations",
            "description": "Disallow lexical declarations in case clauses",
            "url": "https://eslint.org/docs/latest/rules/no-case-declarations",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-catch-shadow",
            "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
            "url": "https://eslint.org/docs/latest/rules/no-catch-shadow",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "no-shadow"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-class-assign",
            "description": "Disallow reassigning class members",
            "url": "https://eslint.org/docs/latest/rules/no-class-assign",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-compare-neg-zero",
            "description": "Disallow comparing against -0",
            "url": "https://eslint.org/docs/latest/rules/no-compare-neg-zero",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-cond-assign",
            "description": "Disallow assignment operators in conditional expressions",
            "url": "https://eslint.org/docs/latest/rules/no-cond-assign",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "except-parens",
                        "always"
                    ]
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                "always"
            ],
            "updatedAt": "2024-01-14T14:12:16.436Z",
            "note": null
        },
        {
            "name": "no-confusing-arrow",
            "description": "Disallow arrow functions where they could be confused with comparisons",
            "url": "https://eslint.org/docs/latest/rules/no-confusing-arrow",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowParens": {
                            "type": "boolean",
                            "default": true
                        },
                        "onlyOneSimpleParam": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-console",
            "description": "Disallow the use of `console`",
            "url": "https://eslint.org/docs/latest/rules/no-console",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-const-assign",
            "description": "Disallow reassigning `const` variables",
            "url": "https://eslint.org/docs/latest/rules/no-const-assign",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:37:43.590Z",
            "note": null
        },
        {
            "name": "no-constant-binary-expression",
            "description": "Disallow expressions where the operation doesn't affect the value",
            "url": "https://eslint.org/docs/latest/rules/no-constant-binary-expression",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T14:14:19.100Z",
            "note": null
        },
        {
            "name": "no-constant-condition",
            "description": "Disallow constant expressions in conditions",
            "url": "https://eslint.org/docs/latest/rules/no-constant-condition",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "checkLoops": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-constructor-return",
            "description": "Disallow returning value from constructor",
            "url": "https://eslint.org/docs/latest/rules/no-constructor-return",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {},
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-continue",
            "description": "Disallow `continue` statements",
            "url": "https://eslint.org/docs/latest/rules/no-continue",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-control-regex",
            "description": "Disallow control characters in regular expressions",
            "url": "https://eslint.org/docs/latest/rules/no-control-regex",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-debugger",
            "description": "Disallow the use of `debugger`",
            "url": "https://eslint.org/docs/latest/rules/no-debugger",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T14:18:25.606Z",
            "note": null
        },
        {
            "name": "no-delete-var",
            "description": "Disallow deleting variables",
            "url": "https://eslint.org/docs/latest/rules/no-delete-var",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-div-regex",
            "description": "Disallow equal signs explicitly at the beginning of regular expressions",
            "url": "https://eslint.org/docs/latest/rules/no-div-regex",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-dupe-args",
            "description": "Disallow duplicate arguments in `function` definitions",
            "url": "https://eslint.org/docs/latest/rules/no-dupe-args",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:36:25.083Z",
            "note": null
        },
        {
            "name": "no-dupe-class-members",
            "description": "Disallow duplicate class members",
            "url": "https://eslint.org/docs/latest/rules/no-dupe-class-members",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:37:59.022Z",
            "note": null
        },
        {
            "name": "no-dupe-else-if",
            "description": "Disallow duplicate conditions in if-else-if chains",
            "url": "https://eslint.org/docs/latest/rules/no-dupe-else-if",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-dupe-keys",
            "description": "Disallow duplicate keys in object literals",
            "url": "https://eslint.org/docs/latest/rules/no-dupe-keys",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:36:34.803Z",
            "note": null
        },
        {
            "name": "no-duplicate-case",
            "description": "Disallow duplicate case labels",
            "url": "https://eslint.org/docs/latest/rules/no-duplicate-case",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-duplicate-imports",
            "description": "Disallow duplicate module imports",
            "url": "https://eslint.org/docs/latest/rules/no-duplicate-imports",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "includeExports": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                {
                    "includeExports": true
                }
            ],
            "updatedAt": "2024-01-14T14:24:30.122Z",
            "note": null
        },
        {
            "name": "no-else-return",
            "description": "Disallow `else` blocks after `return` statements in `if` statements",
            "url": "https://eslint.org/docs/latest/rules/no-else-return",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowElseIf": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-empty",
            "description": "Disallow empty block statements",
            "url": "https://eslint.org/docs/latest/rules/no-empty",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowEmptyCatch": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-empty-character-class",
            "description": "Disallow empty character classes in regular expressions",
            "url": "https://eslint.org/docs/latest/rules/no-empty-character-class",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-empty-function",
            "description": "Disallow empty functions",
            "url": "https://eslint.org/docs/latest/rules/no-empty-function",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "functions",
                                    "arrowFunctions",
                                    "generatorFunctions",
                                    "methods",
                                    "generatorMethods",
                                    "getters",
                                    "setters",
                                    "constructors",
                                    "asyncFunctions",
                                    "asyncMethods"
                                ]
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-empty-pattern",
            "description": "Disallow empty destructuring patterns",
            "url": "https://eslint.org/docs/latest/rules/no-empty-pattern",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowObjectPatternsAsParameters": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-empty-static-block",
            "description": "Disallow empty static blocks",
            "url": "https://eslint.org/docs/latest/rules/no-empty-static-block",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-eq-null",
            "description": "Disallow `null` comparisons without type-checking operators",
            "url": "https://eslint.org/docs/latest/rules/no-eq-null",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-eval",
            "description": "Disallow the use of `eval()`",
            "url": "https://eslint.org/docs/latest/rules/no-eval",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowIndirect": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-ex-assign",
            "description": "Disallow reassigning exceptions in `catch` clauses",
            "url": "https://eslint.org/docs/latest/rules/no-ex-assign",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-extend-native",
            "description": "Disallow extending native types",
            "url": "https://eslint.org/docs/latest/rules/no-extend-native",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-extra-bind",
            "description": "Disallow unnecessary calls to `.bind()`",
            "url": "https://eslint.org/docs/latest/rules/no-extra-bind",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-extra-boolean-cast",
            "description": "Disallow unnecessary boolean casts",
            "url": "https://eslint.org/docs/latest/rules/no-extra-boolean-cast",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "enforceForLogicalOperands": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-extra-label",
            "description": "Disallow unnecessary labels",
            "url": "https://eslint.org/docs/latest/rules/no-extra-label",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-extra-parens",
            "description": "Disallow unnecessary parentheses",
            "url": "https://eslint.org/docs/latest/rules/no-extra-parens",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "functions"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "all"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "conditionalAssign": {
                                        "type": "boolean"
                                    },
                                    "ternaryOperandBinaryExpressions": {
                                        "type": "boolean"
                                    },
                                    "nestedBinaryExpressions": {
                                        "type": "boolean"
                                    },
                                    "returnAssign": {
                                        "type": "boolean"
                                    },
                                    "ignoreJSX": {
                                        "enum": [
                                            "none",
                                            "all",
                                            "single-line",
                                            "multi-line"
                                        ]
                                    },
                                    "enforceForArrowConditionals": {
                                        "type": "boolean"
                                    },
                                    "enforceForSequenceExpressions": {
                                        "type": "boolean"
                                    },
                                    "enforceForNewInMemberExpressions": {
                                        "type": "boolean"
                                    },
                                    "enforceForFunctionPrototypeMethods": {
                                        "type": "boolean"
                                    },
                                    "allowParensAfterCommentPattern": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-extra-semi",
            "description": "Disallow unnecessary semicolons",
            "url": "https://eslint.org/docs/latest/rules/no-extra-semi",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": true,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-fallthrough",
            "description": "Disallow fallthrough of `case` statements",
            "url": "https://eslint.org/docs/latest/rules/no-fallthrough",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "commentPattern": {
                            "type": "string",
                            "default": ""
                        },
                        "allowEmptyCase": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "commentPattern": "fallthrough"
                }
            ],
            "updatedAt": "2024-01-14T14:31:50.343Z",
            "note": null
        },
        {
            "name": "no-floating-decimal",
            "description": "Disallow leading or trailing decimal points in numeric literals",
            "url": "https://eslint.org/docs/latest/rules/no-floating-decimal",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-func-assign",
            "description": "Disallow reassigning `function` declarations",
            "url": "https://eslint.org/docs/latest/rules/no-func-assign",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:37:20.397Z",
            "note": null
        },
        {
            "name": "no-global-assign",
            "description": "Disallow assignments to native objects or read-only global variables",
            "url": "https://eslint.org/docs/latest/rules/no-global-assign",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-implicit-coercion",
            "description": "Disallow shorthand type conversions",
            "url": "https://eslint.org/docs/latest/rules/no-implicit-coercion",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "boolean": {
                            "type": "boolean",
                            "default": true
                        },
                        "number": {
                            "type": "boolean",
                            "default": true
                        },
                        "string": {
                            "type": "boolean",
                            "default": true
                        },
                        "disallowTemplateShorthand": {
                            "type": "boolean",
                            "default": false
                        },
                        "allow": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "~",
                                    "!!",
                                    "+",
                                    "*"
                                ]
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-implicit-globals",
            "description": "Disallow declarations in the global scope",
            "url": "https://eslint.org/docs/latest/rules/no-implicit-globals",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "lexicalBindings": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-implied-eval",
            "description": "Disallow the use of `eval()`-like methods",
            "url": "https://eslint.org/docs/latest/rules/no-implied-eval",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-import-assign",
            "description": "Disallow assigning to imported bindings",
            "url": "https://eslint.org/docs/latest/rules/no-import-assign",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:38:51.030Z",
            "note": null
        },
        {
            "name": "no-inline-comments",
            "description": "Disallow inline comments after code",
            "url": "https://eslint.org/docs/latest/rules/no-inline-comments",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignorePattern": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-inner-declarations",
            "description": "Disallow variable or `function` declarations in nested blocks",
            "url": "https://eslint.org/docs/latest/rules/no-inner-declarations",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "functions",
                        "both"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-invalid-regexp",
            "description": "Disallow invalid regular expression strings in `RegExp` constructors",
            "url": "https://eslint.org/docs/latest/rules/no-invalid-regexp",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowConstructorFlags": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T14:39:10.364Z",
            "note": null
        },
        {
            "name": "no-invalid-this",
            "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
            "url": "https://eslint.org/docs/latest/rules/no-invalid-this",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "capIsConstructor": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:39:49.192Z",
            "note": null
        },
        {
            "name": "no-irregular-whitespace",
            "description": "Disallow irregular whitespace",
            "url": "https://eslint.org/docs/latest/rules/no-irregular-whitespace",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "skipComments": {
                            "type": "boolean",
                            "default": false
                        },
                        "skipStrings": {
                            "type": "boolean",
                            "default": true
                        },
                        "skipTemplates": {
                            "type": "boolean",
                            "default": false
                        },
                        "skipRegExps": {
                            "type": "boolean",
                            "default": false
                        },
                        "skipJSXText": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-iterator",
            "description": "Disallow the use of the `__iterator__` property",
            "url": "https://eslint.org/docs/latest/rules/no-iterator",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-label-var",
            "description": "Disallow labels that share a name with a variable",
            "url": "https://eslint.org/docs/latest/rules/no-label-var",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-labels",
            "description": "Disallow labeled statements",
            "url": "https://eslint.org/docs/latest/rules/no-labels",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowLoop": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowSwitch": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-lone-blocks",
            "description": "Disallow unnecessary nested blocks",
            "url": "https://eslint.org/docs/latest/rules/no-lone-blocks",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-lonely-if",
            "description": "Disallow `if` statements as the only statement in `else` blocks",
            "url": "https://eslint.org/docs/latest/rules/no-lonely-if",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-loop-func",
            "description": "Disallow function declarations that contain unsafe references inside loop statements",
            "url": "https://eslint.org/docs/latest/rules/no-loop-func",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-loss-of-precision",
            "description": "Disallow literal numbers that lose precision",
            "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T23:15:12.213Z",
            "note": null
        },
        {
            "name": "no-magic-numbers",
            "description": "Disallow magic numbers",
            "url": "https://eslint.org/docs/latest/rules/no-magic-numbers",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "detectObjects": {
                            "type": "boolean",
                            "default": false
                        },
                        "enforceConst": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignore": {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "string",
                                        "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                                    }
                                ]
                            },
                            "uniqueItems": true
                        },
                        "ignoreArrayIndexes": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreDefaultValues": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreClassFieldInitialValues": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-misleading-character-class",
            "description": "Disallow characters which are made with multiple code points in character class syntax",
            "url": "https://eslint.org/docs/latest/rules/no-misleading-character-class",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-mixed-operators",
            "description": "Disallow mixed binary operators",
            "url": "https://eslint.org/docs/latest/rules/no-mixed-operators",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "groups": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "+",
                                        "-",
                                        "*",
                                        "/",
                                        "%",
                                        "**",
                                        "&",
                                        "|",
                                        "^",
                                        "~",
                                        "<<",
                                        ">>",
                                        ">>>",
                                        "==",
                                        "!=",
                                        "===",
                                        "!==",
                                        ">",
                                        ">=",
                                        "<",
                                        "<=",
                                        "&&",
                                        "||",
                                        "in",
                                        "instanceof",
                                        "?:",
                                        "??"
                                    ]
                                },
                                "minItems": 2,
                                "uniqueItems": true
                            },
                            "uniqueItems": true
                        },
                        "allowSamePrecedence": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-mixed-requires",
            "description": "Disallow `require` calls to be mixed with regular variable declarations",
            "url": "https://eslint.org/docs/latest/rules/no-mixed-requires",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "grouping": {
                                    "type": "boolean"
                                },
                                "allowCall": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-mixed-spaces-and-tabs",
            "description": "Disallow mixed spaces and tabs for indentation",
            "url": "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs",
            "library": "eslint",
            "type": "layout",
            "fixable": null,
            "deprecated": true,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "smart-tabs",
                        true,
                        false
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-multi-assign",
            "description": "Disallow use of chained assignment expressions",
            "url": "https://eslint.org/docs/latest/rules/no-multi-assign",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreNonDeclaration": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-multi-spaces",
            "description": "Disallow multiple spaces",
            "url": "https://eslint.org/docs/latest/rules/no-multi-spaces",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "object",
                            "patternProperties": {
                                "^([A-Z][a-z]*)+$": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "ignoreEOLComments": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-multi-str",
            "description": "Disallow multiline strings",
            "url": "https://eslint.org/docs/latest/rules/no-multi-str",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-multiple-empty-lines",
            "description": "Disallow multiple empty lines",
            "url": "https://eslint.org/docs/latest/rules/no-multiple-empty-lines",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "maxEOF": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "maxBOF": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    "required": [
                        "max"
                    ],
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-native-reassign",
            "description": "Disallow assignments to native objects or read-only global variables",
            "url": "https://eslint.org/docs/latest/rules/no-native-reassign",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "no-global-assign"
            ],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-negated-condition",
            "description": "Disallow negated conditions",
            "url": "https://eslint.org/docs/latest/rules/no-negated-condition",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-negated-in-lhs",
            "description": "Disallow negating the left operand in `in` expressions",
            "url": "https://eslint.org/docs/latest/rules/no-negated-in-lhs",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "no-unsafe-negation"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-nested-ternary",
            "description": "Disallow nested ternary expressions",
            "url": "https://eslint.org/docs/latest/rules/no-nested-ternary",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-new",
            "description": "Disallow `new` operators outside of assignments or comparisons",
            "url": "https://eslint.org/docs/latest/rules/no-new",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-new-func",
            "description": "Disallow `new` operators with the `Function` object",
            "url": "https://eslint.org/docs/latest/rules/no-new-func",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-new-native-nonconstructor",
            "description": "Disallow `new` operators with global non-constructor functions",
            "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-new-object",
            "description": "Disallow `Object` constructors",
            "url": "https://eslint.org/docs/latest/rules/no-new-object",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "no-object-constructor"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-new-require",
            "description": "Disallow `new` operators with calls to `require`",
            "url": "https://eslint.org/docs/latest/rules/no-new-require",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-new-symbol",
            "description": "Disallow `new` operators with the `Symbol` object",
            "url": "https://eslint.org/docs/latest/rules/no-new-symbol",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:38:40.286Z",
            "note": null
        },
        {
            "name": "no-new-wrappers",
            "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
            "url": "https://eslint.org/docs/latest/rules/no-new-wrappers",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-nonoctal-decimal-escape",
            "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
            "url": "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-obj-calls",
            "description": "Disallow calling global object properties as functions",
            "url": "https://eslint.org/docs/latest/rules/no-obj-calls",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:38:28.349Z",
            "note": null
        },
        {
            "name": "no-object-constructor",
            "description": "Disallow calls to the `Object` constructor without an argument",
            "url": "https://eslint.org/docs/latest/rules/no-object-constructor",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-octal",
            "description": "Disallow octal literals",
            "url": "https://eslint.org/docs/latest/rules/no-octal",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-octal-escape",
            "description": "Disallow octal escape sequences in string literals",
            "url": "https://eslint.org/docs/latest/rules/no-octal-escape",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-param-reassign",
            "description": "Disallow reassigning `function` parameters",
            "url": "https://eslint.org/docs/latest/rules/no-param-reassign",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "object",
                            "properties": {
                                "props": {
                                    "enum": [
                                        false
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "props": {
                                    "enum": [
                                        true
                                    ]
                                },
                                "ignorePropertyModificationsFor": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "uniqueItems": true
                                },
                                "ignorePropertyModificationsForRegex": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "uniqueItems": true
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "props": true
                }
            ],
            "updatedAt": "2024-01-14T15:00:40.303Z",
            "note": null
        },
        {
            "name": "no-path-concat",
            "description": "Disallow string concatenation with `__dirname` and `__filename`",
            "url": "https://eslint.org/docs/latest/rules/no-path-concat",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-plusplus",
            "description": "Disallow the unary operators `++` and `--`",
            "url": "https://eslint.org/docs/latest/rules/no-plusplus",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowForLoopAfterthoughts": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-process-env",
            "description": "Disallow the use of `process.env`",
            "url": "https://eslint.org/docs/latest/rules/no-process-env",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-process-exit",
            "description": "Disallow the use of `process.exit()`",
            "url": "https://eslint.org/docs/latest/rules/no-process-exit",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-promise-executor-return",
            "description": "Disallow returning values from Promise executor functions",
            "url": "https://eslint.org/docs/latest/rules/no-promise-executor-return",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowVoid": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                {
                    "allowVoid": true
                }
            ],
            "updatedAt": "2024-01-14T15:02:33.800Z",
            "note": null
        },
        {
            "name": "no-proto",
            "description": "Disallow the use of the `__proto__` property",
            "url": "https://eslint.org/docs/latest/rules/no-proto",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-prototype-builtins",
            "description": "Disallow calling some `Object.prototype` methods directly on objects",
            "url": "https://eslint.org/docs/latest/rules/no-prototype-builtins",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T15:04:18.281Z",
            "note": null
        },
        {
            "name": "no-redeclare",
            "description": "Disallow variable redeclaration",
            "url": "https://eslint.org/docs/latest/rules/no-redeclare",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "builtinGlobals": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:39:11.207Z",
            "note": null
        },
        {
            "name": "no-regex-spaces",
            "description": "Disallow multiple spaces in regular expressions",
            "url": "https://eslint.org/docs/latest/rules/no-regex-spaces",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-restricted-exports",
            "description": "Disallow specified names in exports",
            "url": "https://eslint.org/docs/latest/rules/no-restricted-exports",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "restrictedNamedExports": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "uniqueItems": true
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "restrictedNamedExports": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "pattern": "^(?!default$)"
                                    },
                                    "uniqueItems": true
                                },
                                "restrictDefaultExports": {
                                    "type": "object",
                                    "properties": {
                                        "direct": {
                                            "type": "boolean"
                                        },
                                        "named": {
                                            "type": "boolean"
                                        },
                                        "defaultFrom": {
                                            "type": "boolean"
                                        },
                                        "namedFrom": {
                                            "type": "boolean"
                                        },
                                        "namespaceFrom": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-restricted-globals",
            "description": "Disallow specified global variables",
            "url": "https://eslint.org/docs/latest/rules/no-restricted-globals",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "items": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "additionalProperties": false
                        }
                    ]
                },
                "uniqueItems": true,
                "minItems": 0
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-restricted-imports",
            "description": "Disallow specified modules when loaded by `import`",
            "url": "https://eslint.org/docs/latest/rules/no-restricted-imports",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "importNames": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name"
                                    ]
                                }
                            ]
                        },
                        "uniqueItems": true
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "object",
                                "properties": {
                                    "paths": {
                                        "type": "array",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "minLength": 1
                                                        },
                                                        "importNames": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "name"
                                                    ]
                                                }
                                            ]
                                        },
                                        "uniqueItems": true
                                    },
                                    "patterns": {
                                        "anyOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "uniqueItems": true
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "importNames": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "minItems": 1,
                                                            "uniqueItems": true
                                                        },
                                                        "group": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "minItems": 1,
                                                            "uniqueItems": true
                                                        },
                                                        "importNamePattern": {
                                                            "type": "string"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "minLength": 1
                                                        },
                                                        "caseSensitive": {
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "group"
                                                    ]
                                                },
                                                "uniqueItems": true
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "additionalItems": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-restricted-modules",
            "description": "Disallow specified modules when loaded by `require`",
            "url": "https://eslint.org/docs/latest/rules/no-restricted-modules",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string",
                                            "minLength": 1
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name"
                                    ]
                                }
                            ]
                        },
                        "uniqueItems": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "paths": {
                                    "type": "array",
                                    "items": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "minLength": 1
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "required": [
                                                    "name"
                                                ]
                                            }
                                        ]
                                    },
                                    "uniqueItems": true
                                },
                                "patterns": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "uniqueItems": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "additionalItems": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-restricted-properties",
            "description": "Disallow certain properties on certain objects",
            "url": "https://eslint.org/docs/latest/rules/no-restricted-properties",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "items": {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "object": {
                                    "type": "string"
                                },
                                "property": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "object"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "object": {
                                    "type": "string"
                                },
                                "property": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "property"
                            ]
                        }
                    ]
                },
                "uniqueItems": true
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-restricted-syntax",
            "description": "Disallow specified syntax",
            "url": "https://eslint.org/docs/latest/rules/no-restricted-syntax",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "items": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "selector"
                            ],
                            "additionalProperties": false
                        }
                    ]
                },
                "uniqueItems": true,
                "minItems": 0
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-return-assign",
            "description": "Disallow assignment operators in `return` statements",
            "url": "https://eslint.org/docs/latest/rules/no-return-assign",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "except-parens",
                        "always"
                    ]
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T15:07:04.563Z",
            "note": null
        },
        {
            "name": "no-return-await",
            "description": "Disallow unnecessary `return await`",
            "url": "https://eslint.org/docs/latest/rules/no-return-await",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-script-url",
            "description": "Disallow `javascript:` urls",
            "url": "https://eslint.org/docs/latest/rules/no-script-url",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-self-assign",
            "description": "Disallow assignments where both sides are exactly the same",
            "url": "https://eslint.org/docs/latest/rules/no-self-assign",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "props": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-self-compare",
            "description": "Disallow comparisons where both sides are exactly the same",
            "url": "https://eslint.org/docs/latest/rules/no-self-compare",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-sequences",
            "description": "Disallow comma operators",
            "url": "https://eslint.org/docs/latest/rules/no-sequences",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "properties": {
                        "allowInParentheses": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-setter-return",
            "description": "Disallow returning values from setters",
            "url": "https://eslint.org/docs/latest/rules/no-setter-return",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:38:13.413Z",
            "note": null
        },
        {
            "name": "no-shadow",
            "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
            "url": "https://eslint.org/docs/latest/rules/no-shadow",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "builtinGlobals": {
                            "type": "boolean",
                            "default": false
                        },
                        "hoist": {
                            "enum": [
                                "all",
                                "functions",
                                "never"
                            ],
                            "default": "functions"
                        },
                        "allow": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ignoreOnInitialization": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T23:32:31.532Z",
            "note": null
        },
        {
            "name": "no-shadow-restricted-names",
            "description": "Disallow identifiers from shadowing restricted names",
            "url": "https://eslint.org/docs/latest/rules/no-shadow-restricted-names",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-spaced-func",
            "description": "Disallow spacing between function identifiers and their applications (deprecated)",
            "url": "https://eslint.org/docs/latest/rules/no-spaced-func",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "func-call-spacing"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-sparse-arrays",
            "description": "Disallow sparse arrays",
            "url": "https://eslint.org/docs/latest/rules/no-sparse-arrays",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-sync",
            "description": "Disallow synchronous methods",
            "url": "https://eslint.org/docs/latest/rules/no-sync",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowAtRootLevel": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-tabs",
            "description": "Disallow all tabs",
            "url": "https://eslint.org/docs/latest/rules/no-tabs",
            "library": "eslint",
            "type": "layout",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowIndentationTabs": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-template-curly-in-string",
            "description": "Disallow template literal placeholder syntax in regular strings",
            "url": "https://eslint.org/docs/latest/rules/no-template-curly-in-string",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-ternary",
            "description": "Disallow ternary operators",
            "url": "https://eslint.org/docs/latest/rules/no-ternary",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-this-before-super",
            "description": "Disallow `this`/`super` before calling `super()` in constructors",
            "url": "https://eslint.org/docs/latest/rules/no-this-before-super",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:37:06.060Z",
            "note": null
        },
        {
            "name": "no-throw-literal",
            "description": "Disallow throwing literals as exceptions",
            "url": "https://eslint.org/docs/latest/rules/no-throw-literal",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T23:36:03.462Z",
            "note": null
        },
        {
            "name": "no-trailing-spaces",
            "description": "Disallow trailing whitespace at the end of lines",
            "url": "https://eslint.org/docs/latest/rules/no-trailing-spaces",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "skipBlankLines": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreComments": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-undef",
            "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
            "url": "https://eslint.org/docs/latest/rules/no-undef",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "typeof": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:38:59.605Z",
            "note": null
        },
        {
            "name": "no-undef-init",
            "description": "Disallow initializing variables to `undefined`",
            "url": "https://eslint.org/docs/latest/rules/no-undef-init",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-undefined",
            "description": "Disallow the use of `undefined` as an identifier",
            "url": "https://eslint.org/docs/latest/rules/no-undefined",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-underscore-dangle",
            "description": "Disallow dangling underscores in identifiers",
            "url": "https://eslint.org/docs/latest/rules/no-underscore-dangle",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "allowAfterThis": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowAfterSuper": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowAfterThisConstructor": {
                            "type": "boolean",
                            "default": false
                        },
                        "enforceInMethodNames": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowFunctionParams": {
                            "type": "boolean",
                            "default": true
                        },
                        "enforceInClassFields": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowInArrayDestructuring": {
                            "type": "boolean",
                            "default": true
                        },
                        "allowInObjectDestructuring": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unexpected-multiline",
            "description": "Disallow confusing multiline expressions",
            "url": "https://eslint.org/docs/latest/rules/no-unexpected-multiline",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unmodified-loop-condition",
            "description": "Disallow unmodified loop conditions",
            "url": "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unneeded-ternary",
            "description": "Disallow ternary operators when simpler alternatives exist",
            "url": "https://eslint.org/docs/latest/rules/no-unneeded-ternary",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "defaultAssignment": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unreachable",
            "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
            "url": "https://eslint.org/docs/latest/rules/no-unreachable",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:37:31.933Z",
            "note": null
        },
        {
            "name": "no-unreachable-loop",
            "description": "Disallow loops with a body that allows only one iteration",
            "url": "https://eslint.org/docs/latest/rules/no-unreachable-loop",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignore": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "WhileStatement",
                                    "DoWhileStatement",
                                    "ForStatement",
                                    "ForInStatement",
                                    "ForOfStatement"
                                ]
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unsafe-finally",
            "description": "Disallow control flow statements in `finally` blocks",
            "url": "https://eslint.org/docs/latest/rules/no-unsafe-finally",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-15T00:35:56.919Z",
            "note": null
        },
        {
            "name": "no-unsafe-negation",
            "description": "Disallow negating the left operand of relational operators",
            "url": "https://eslint.org/docs/latest/rules/no-unsafe-negation",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "enforceForOrderingRelations": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": true,
            "config": [],
            "updatedAt": "2024-01-14T00:39:28.383Z",
            "note": null
        },
        {
            "name": "no-unsafe-optional-chaining",
            "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
            "url": "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "disallowArithmeticOperators": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                {
                    "disallowArithmeticOperators": true
                }
            ],
            "updatedAt": "2024-01-15T00:37:20.361Z",
            "note": null
        },
        {
            "name": "no-unused-expressions",
            "description": "Disallow unused expressions",
            "url": "https://eslint.org/docs/latest/rules/no-unused-expressions",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowShortCircuit": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowTernary": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowTaggedTemplates": {
                            "type": "boolean",
                            "default": false
                        },
                        "enforceForJSX": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unused-labels",
            "description": "Disallow unused labels",
            "url": "https://eslint.org/docs/latest/rules/no-unused-labels",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unused-private-class-members",
            "description": "Disallow unused private class members",
            "url": "https://eslint.org/docs/latest/rules/no-unused-private-class-members",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-unused-vars",
            "description": "Disallow unused variables",
            "url": "https://eslint.org/docs/latest/rules/no-unused-vars",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "all",
                                "local"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "vars": {
                                    "enum": [
                                        "all",
                                        "local"
                                    ]
                                },
                                "varsIgnorePattern": {
                                    "type": "string"
                                },
                                "args": {
                                    "enum": [
                                        "all",
                                        "after-used",
                                        "none"
                                    ]
                                },
                                "ignoreRestSiblings": {
                                    "type": "boolean"
                                },
                                "argsIgnorePattern": {
                                    "type": "string"
                                },
                                "caughtErrors": {
                                    "enum": [
                                        "all",
                                        "none"
                                    ]
                                },
                                "caughtErrorsIgnorePattern": {
                                    "type": "string"
                                },
                                "destructuredArrayIgnorePattern": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-use-before-define",
            "description": "Disallow the use of variables before they are defined",
            "url": "https://eslint.org/docs/latest/rules/no-use-before-define",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "nofunc"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "functions": {
                                    "type": "boolean"
                                },
                                "classes": {
                                    "type": "boolean"
                                },
                                "variables": {
                                    "type": "boolean"
                                },
                                "allowNamedExports": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-backreference",
            "description": "Disallow useless backreferences in regular expressions",
            "url": "https://eslint.org/docs/latest/rules/no-useless-backreference",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-call",
            "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
            "url": "https://eslint.org/docs/latest/rules/no-useless-call",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-catch",
            "description": "Disallow unnecessary `catch` clauses",
            "url": "https://eslint.org/docs/latest/rules/no-useless-catch",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-15T00:47:01.640Z",
            "note": null
        },
        {
            "name": "no-useless-computed-key",
            "description": "Disallow unnecessary computed property keys in objects and classes",
            "url": "https://eslint.org/docs/latest/rules/no-useless-computed-key",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "enforceForClassMembers": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-concat",
            "description": "Disallow unnecessary concatenation of literals or template literals",
            "url": "https://eslint.org/docs/latest/rules/no-useless-concat",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-constructor",
            "description": "Disallow unnecessary constructors",
            "url": "https://eslint.org/docs/latest/rules/no-useless-constructor",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-escape",
            "description": "Disallow unnecessary escape characters",
            "url": "https://eslint.org/docs/latest/rules/no-useless-escape",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-rename",
            "description": "Disallow renaming import, export, and destructured assignments to the same name",
            "url": "https://eslint.org/docs/latest/rules/no-useless-rename",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreDestructuring": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreImport": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreExport": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-useless-return",
            "description": "Disallow redundant return statements",
            "url": "https://eslint.org/docs/latest/rules/no-useless-return",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-var",
            "description": "Require `let` or `const` instead of `var`",
            "url": "https://eslint.org/docs/latest/rules/no-var",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-void",
            "description": "Disallow `void` operators",
            "url": "https://eslint.org/docs/latest/rules/no-void",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowAsStatement": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-warning-comments",
            "description": "Disallow specified warning terms in comments",
            "url": "https://eslint.org/docs/latest/rules/no-warning-comments",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "terms": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "location": {
                            "enum": [
                                "start",
                                "anywhere"
                            ]
                        },
                        "decoration": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "pattern": "^\\S$"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-whitespace-before-property",
            "description": "Disallow whitespace before properties",
            "url": "https://eslint.org/docs/latest/rules/no-whitespace-before-property",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "no-with",
            "description": "Disallow `with` statements",
            "url": "https://eslint.org/docs/latest/rules/no-with",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "nonblock-statement-body-position",
            "description": "Enforce the location of single-line statements",
            "url": "https://eslint.org/docs/latest/rules/nonblock-statement-body-position",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "beside",
                        "below",
                        "any"
                    ]
                },
                {
                    "properties": {
                        "overrides": {
                            "properties": {
                                "if": {
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "else": {
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "while": {
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "do": {
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "for": {
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "object-curly-newline",
            "description": "Enforce consistent line breaks after opening and before closing braces",
            "url": "https://eslint.org/docs/latest/rules/object-curly-newline",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "oneOf": [
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "multiline": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "consistent": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "ObjectExpression": {
                                    "oneOf": [
                                        {
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                },
                                "ObjectPattern": {
                                    "oneOf": [
                                        {
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                },
                                "ImportDeclaration": {
                                    "oneOf": [
                                        {
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                },
                                "ExportDeclaration": {
                                    "oneOf": [
                                        {
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "object-curly-spacing",
            "description": "Enforce consistent spacing inside braces",
            "url": "https://eslint.org/docs/latest/rules/object-curly-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "arraysInObjects": {
                            "type": "boolean"
                        },
                        "objectsInObjects": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "object-property-newline",
            "description": "Enforce placing object properties on separate lines",
            "url": "https://eslint.org/docs/latest/rules/object-property-newline",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowAllPropertiesOnSameLine": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowMultiplePropertiesPerLine": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "object-shorthand",
            "description": "Require or disallow method and property shorthand syntax for object literals",
            "url": "https://eslint.org/docs/latest/rules/object-shorthand",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "methods",
                                    "properties",
                                    "never",
                                    "consistent",
                                    "consistent-as-needed"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "methods",
                                    "properties"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "avoidQuotes": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "methods"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ignoreConstructors": {
                                        "type": "boolean"
                                    },
                                    "methodsIgnorePattern": {
                                        "type": "string"
                                    },
                                    "avoidQuotes": {
                                        "type": "boolean"
                                    },
                                    "avoidExplicitReturnArrows": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "one-var",
            "description": "Enforce variables to be declared either together or separately in functions",
            "url": "https://eslint.org/docs/latest/rules/one-var",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never",
                                "consecutive"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "separateRequires": {
                                    "type": "boolean"
                                },
                                "var": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "consecutive"
                                    ]
                                },
                                "let": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "consecutive"
                                    ]
                                },
                                "const": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "consecutive"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "initialized": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "consecutive"
                                    ]
                                },
                                "uninitialized": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "consecutive"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "one-var-declaration-per-line",
            "description": "Require or disallow newlines around variable declarations",
            "url": "https://eslint.org/docs/latest/rules/one-var-declaration-per-line",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "initializations"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "operator-assignment",
            "description": "Require or disallow assignment operator shorthand where possible",
            "url": "https://eslint.org/docs/latest/rules/operator-assignment",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "operator-linebreak",
            "description": "Enforce consistent linebreak style for operators",
            "url": "https://eslint.org/docs/latest/rules/operator-linebreak",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "after",
                        "before",
                        "none",
                        null
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "overrides": {
                            "type": "object",
                            "additionalProperties": {
                                "enum": [
                                    "after",
                                    "before",
                                    "none",
                                    "ignore"
                                ]
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "padded-blocks",
            "description": "Require or disallow padding within blocks",
            "url": "https://eslint.org/docs/latest/rules/padded-blocks",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "blocks": {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                "switches": {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                "classes": {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "allowSingleLineBlocks": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "padding-line-between-statements",
            "description": "Require or disallow padding lines between statements",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "definitions": {
                    "paddingType": {
                        "enum": [
                            "any",
                            "never",
                            "always"
                        ]
                    },
                    "statementType": {
                        "anyOf": [
                            {
                                "enum": [
                                    "*",
                                    "block-like",
                                    "cjs-export",
                                    "cjs-import",
                                    "directive",
                                    "expression",
                                    "iife",
                                    "multiline-block-like",
                                    "multiline-expression",
                                    "multiline-const",
                                    "multiline-let",
                                    "multiline-var",
                                    "singleline-const",
                                    "singleline-let",
                                    "singleline-var",
                                    "block",
                                    "empty",
                                    "function",
                                    "break",
                                    "case",
                                    "class",
                                    "const",
                                    "continue",
                                    "debugger",
                                    "default",
                                    "do",
                                    "export",
                                    "for",
                                    "if",
                                    "import",
                                    "let",
                                    "return",
                                    "switch",
                                    "throw",
                                    "try",
                                    "var",
                                    "while",
                                    "with"
                                ]
                            },
                            {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "*",
                                        "block-like",
                                        "cjs-export",
                                        "cjs-import",
                                        "directive",
                                        "expression",
                                        "iife",
                                        "multiline-block-like",
                                        "multiline-expression",
                                        "multiline-const",
                                        "multiline-let",
                                        "multiline-var",
                                        "singleline-const",
                                        "singleline-let",
                                        "singleline-var",
                                        "block",
                                        "empty",
                                        "function",
                                        "break",
                                        "case",
                                        "class",
                                        "const",
                                        "continue",
                                        "debugger",
                                        "default",
                                        "do",
                                        "export",
                                        "for",
                                        "if",
                                        "import",
                                        "let",
                                        "return",
                                        "switch",
                                        "throw",
                                        "try",
                                        "var",
                                        "while",
                                        "with"
                                    ]
                                },
                                "minItems": 1,
                                "uniqueItems": true
                            }
                        ]
                    }
                },
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "blankLine": {
                            "$ref": "#/definitions/paddingType"
                        },
                        "prev": {
                            "$ref": "#/definitions/statementType"
                        },
                        "next": {
                            "$ref": "#/definitions/statementType"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "blankLine",
                        "prev",
                        "next"
                    ]
                }
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-arrow-callback",
            "description": "Require using arrow functions for callbacks",
            "url": "https://eslint.org/docs/latest/rules/prefer-arrow-callback",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowNamedFunctions": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowUnboundThis": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-const",
            "description": "Require `const` declarations for variables that are never reassigned after declared",
            "url": "https://eslint.org/docs/latest/rules/prefer-const",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "destructuring": {
                            "enum": [
                                "any",
                                "all"
                            ],
                            "default": "any"
                        },
                        "ignoreReadBeforeAssign": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "destructuring": "all"
                }
            ],
            "updatedAt": "2024-01-15T02:23:39.222Z",
            "note": null
        },
        {
            "name": "prefer-destructuring",
            "description": "Require destructuring from arrays and/or objects",
            "url": "https://eslint.org/docs/latest/rules/prefer-destructuring",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "object",
                            "properties": {
                                "VariableDeclarator": {
                                    "type": "object",
                                    "properties": {
                                        "array": {
                                            "type": "boolean"
                                        },
                                        "object": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "AssignmentExpression": {
                                    "type": "object",
                                    "properties": {
                                        "array": {
                                            "type": "boolean"
                                        },
                                        "object": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "array": {
                                    "type": "boolean"
                                },
                                "object": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "enforceForRenamedProperties": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-exponentiation-operator",
            "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
            "url": "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-named-capture-group",
            "description": "Enforce using named capture group in regular expression",
            "url": "https://eslint.org/docs/latest/rules/prefer-named-capture-group",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-numeric-literals",
            "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
            "url": "https://eslint.org/docs/latest/rules/prefer-numeric-literals",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-object-has-own",
            "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
            "url": "https://eslint.org/docs/latest/rules/prefer-object-has-own",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-object-spread",
            "description": "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead",
            "url": "https://eslint.org/docs/latest/rules/prefer-object-spread",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-promise-reject-errors",
            "description": "Require using Error objects as Promise rejection reasons",
            "url": "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowEmptyReject": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-reflect",
            "description": "Require `Reflect` methods where applicable",
            "url": "https://eslint.org/docs/latest/rules/prefer-reflect",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "apply",
                                    "call",
                                    "delete",
                                    "defineProperty",
                                    "getOwnPropertyDescriptor",
                                    "getPrototypeOf",
                                    "setPrototypeOf",
                                    "isExtensible",
                                    "getOwnPropertyNames",
                                    "preventExtensions"
                                ]
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-regex-literals",
            "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
            "url": "https://eslint.org/docs/latest/rules/prefer-regex-literals",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "disallowRedundantWrapping": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-rest-params",
            "description": "Require rest parameters instead of `arguments`",
            "url": "https://eslint.org/docs/latest/rules/prefer-rest-params",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-spread",
            "description": "Require spread operators instead of `.apply()`",
            "url": "https://eslint.org/docs/latest/rules/prefer-spread",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "prefer-template",
            "description": "Require template literals instead of string concatenation",
            "url": "https://eslint.org/docs/latest/rules/prefer-template",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "quote-props",
            "description": "Require quotes around object literal property names",
            "url": "https://eslint.org/docs/latest/rules/quote-props",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "as-needed",
                                    "consistent",
                                    "consistent-as-needed"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "as-needed",
                                    "consistent",
                                    "consistent-as-needed"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "keywords": {
                                        "type": "boolean"
                                    },
                                    "unnecessary": {
                                        "type": "boolean"
                                    },
                                    "numbers": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "quotes",
            "description": "Enforce the consistent use of either backticks, double, or single quotes",
            "url": "https://eslint.org/docs/latest/rules/quotes",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "single",
                        "double",
                        "backtick"
                    ]
                },
                {
                    "anyOf": [
                        {
                            "enum": [
                                "avoid-escape"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "avoidEscape": {
                                    "type": "boolean"
                                },
                                "allowTemplateLiterals": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "radix",
            "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
            "url": "https://eslint.org/docs/latest/rules/radix",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "as-needed"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "require-atomic-updates",
            "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
            "url": "https://eslint.org/docs/latest/rules/require-atomic-updates",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowProperties": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "require-await",
            "description": "Disallow async functions which have no `await` expression",
            "url": "https://eslint.org/docs/latest/rules/require-await",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:46:02.112Z",
            "note": null
        },
        {
            "name": "require-jsdoc",
            "description": "Require JSDoc comments",
            "url": "https://eslint.org/docs/latest/rules/require-jsdoc",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "require": {
                            "type": "object",
                            "properties": {
                                "ClassDeclaration": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "MethodDefinition": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "FunctionDeclaration": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "ArrowFunctionExpression": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "FunctionExpression": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            "additionalProperties": false,
                            "default": {}
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "require-unicode-regexp",
            "description": "Enforce the use of `u` or `v` flag on RegExp",
            "url": "https://eslint.org/docs/latest/rules/require-unicode-regexp",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "require-yield",
            "description": "Require generator functions to contain `yield`",
            "url": "https://eslint.org/docs/latest/rules/require-yield",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "rest-spread-spacing",
            "description": "Enforce spacing between rest and spread operators and their expressions",
            "url": "https://eslint.org/docs/latest/rules/rest-spread-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "semi",
            "description": "Require or disallow semicolons instead of ASI",
            "url": "https://eslint.org/docs/latest/rules/semi",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "beforeStatementContinuationChars": {
                                        "enum": [
                                            "always",
                                            "any",
                                            "never"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "omitLastInOneLineBlock": {
                                        "type": "boolean"
                                    },
                                    "omitLastInOneLineClassBody": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "semi-spacing",
            "description": "Enforce consistent spacing before and after semicolons",
            "url": "https://eslint.org/docs/latest/rules/semi-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": false
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "semi-style",
            "description": "Enforce location of semicolons",
            "url": "https://eslint.org/docs/latest/rules/semi-style",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "last",
                        "first"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "sort-imports",
            "description": "Enforce sorted import declarations within modules",
            "url": "https://eslint.org/docs/latest/rules/sort-imports",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreCase": {
                            "type": "boolean",
                            "default": false
                        },
                        "memberSyntaxSortOrder": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "none",
                                    "all",
                                    "multiple",
                                    "single"
                                ]
                            },
                            "uniqueItems": true,
                            "minItems": 4,
                            "maxItems": 4
                        },
                        "ignoreDeclarationSort": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreMemberSort": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowSeparatedGroups": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "sort-keys",
            "description": "Require object keys to be sorted",
            "url": "https://eslint.org/docs/latest/rules/sort-keys",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "caseSensitive": {
                            "type": "boolean",
                            "default": true
                        },
                        "natural": {
                            "type": "boolean",
                            "default": false
                        },
                        "minKeys": {
                            "type": "integer",
                            "minimum": 2,
                            "default": 2
                        },
                        "allowLineSeparatedGroups": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "sort-vars",
            "description": "Require variables within the same declaration block to be sorted",
            "url": "https://eslint.org/docs/latest/rules/sort-vars",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreCase": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "space-before-blocks",
            "description": "Enforce consistent spacing before blocks",
            "url": "https://eslint.org/docs/latest/rules/space-before-blocks",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "keywords": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                },
                                "functions": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                },
                                "classes": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "space-before-function-paren",
            "description": "Enforce consistent spacing before `function` definition opening parenthesis",
            "url": "https://eslint.org/docs/latest/rules/space-before-function-paren",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "anonymous": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "named": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "asyncArrow": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "space-in-parens",
            "description": "Enforce consistent spacing inside parentheses",
            "url": "https://eslint.org/docs/latest/rules/space-in-parens",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "{}",
                                    "[]",
                                    "()",
                                    "empty"
                                ]
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "space-infix-ops",
            "description": "Require spacing around infix operators",
            "url": "https://eslint.org/docs/latest/rules/space-infix-ops",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "int32Hint": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "space-unary-ops",
            "description": "Enforce consistent spacing before or after unary operators",
            "url": "https://eslint.org/docs/latest/rules/space-unary-ops",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "words": {
                            "type": "boolean",
                            "default": true
                        },
                        "nonwords": {
                            "type": "boolean",
                            "default": false
                        },
                        "overrides": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "spaced-comment",
            "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
            "url": "https://eslint.org/docs/latest/rules/spaced-comment",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "markers": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "line": {
                            "type": "object",
                            "properties": {
                                "exceptions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "markers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        "block": {
                            "type": "object",
                            "properties": {
                                "exceptions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "markers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "balanced": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "strict",
            "description": "Require or disallow strict mode directives",
            "url": "https://eslint.org/docs/latest/rules/strict",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "never",
                        "global",
                        "function",
                        "safe"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "switch-colon-spacing",
            "description": "Enforce spacing around colons of switch statements",
            "url": "https://eslint.org/docs/latest/rules/switch-colon-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": false
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "symbol-description",
            "description": "Require symbol descriptions",
            "url": "https://eslint.org/docs/latest/rules/symbol-description",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "template-curly-spacing",
            "description": "Require or disallow spacing around embedded expressions of template strings",
            "url": "https://eslint.org/docs/latest/rules/template-curly-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "template-tag-spacing",
            "description": "Require or disallow spacing between template tags and their literals",
            "url": "https://eslint.org/docs/latest/rules/template-tag-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicode-bom",
            "description": "Require or disallow Unicode byte order mark (BOM)",
            "url": "https://eslint.org/docs/latest/rules/unicode-bom",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "use-isnan",
            "description": "Require calls to `isNaN()` when checking for `NaN`",
            "url": "https://eslint.org/docs/latest/rules/use-isnan",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "enforceForSwitchCase": {
                            "type": "boolean",
                            "default": true
                        },
                        "enforceForIndexOf": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                {
                    "enforceForSwitchCase": true,
                    "enforceForIndexOf": true
                }
            ],
            "updatedAt": "2024-01-15T16:27:34.230Z",
            "note": null
        },
        {
            "name": "valid-jsdoc",
            "description": "Enforce valid JSDoc comments",
            "url": "https://eslint.org/docs/latest/rules/valid-jsdoc",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "prefer": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "preferType": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "requireReturn": {
                            "type": "boolean",
                            "default": true
                        },
                        "requireParamDescription": {
                            "type": "boolean",
                            "default": true
                        },
                        "requireReturnDescription": {
                            "type": "boolean",
                            "default": true
                        },
                        "matchDescription": {
                            "type": "string"
                        },
                        "requireReturnType": {
                            "type": "boolean",
                            "default": true
                        },
                        "requireParamType": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "valid-typeof",
            "description": "Enforce comparing `typeof` expressions against valid strings",
            "url": "https://eslint.org/docs/latest/rules/valid-typeof",
            "library": "eslint",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "requireStringLiterals": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "vars-on-top",
            "description": "Require `var` declarations be placed at the top of their containing scope",
            "url": "https://eslint.org/docs/latest/rules/vars-on-top",
            "library": "eslint",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "wrap-iife",
            "description": "Require parentheses around immediate `function` invocations",
            "url": "https://eslint.org/docs/latest/rules/wrap-iife",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "outside",
                        "inside",
                        "any"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "functionPrototypeMethods": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "wrap-regex",
            "description": "Require parenthesis around regex literals",
            "url": "https://eslint.org/docs/latest/rules/wrap-regex",
            "library": "eslint",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "yield-star-spacing",
            "description": "Require or disallow spacing around the `*` in `yield*` expressions",
            "url": "https://eslint.org/docs/latest/rules/yield-star-spacing",
            "library": "eslint",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "before",
                                "after",
                                "both",
                                "neither"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "before": {
                                    "type": "boolean"
                                },
                                "after": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "yoda",
            "description": "Require or disallow \"Yoda\" conditions",
            "url": "https://eslint.org/docs/latest/rules/yoda",
            "library": "eslint",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptRange": {
                            "type": "boolean",
                            "default": false
                        },
                        "onlyEquality": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/adjacent-overload-signatures",
            "description": "Require that function overload signatures be consecutive",
            "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/array-type",
            "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
            "url": "https://typescript-eslint.io/rules/array-type",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "arrayOption": {
                            "type": "string",
                            "enum": [
                                "array",
                                "generic",
                                "array-simple"
                            ]
                        }
                    },
                    "additionalProperties": false,
                    "properties": {
                        "default": {
                            "$ref": "#/items/0/$defs/arrayOption",
                            "description": "The array type expected for mutable cases."
                        },
                        "readonly": {
                            "$ref": "#/items/0/$defs/arrayOption",
                            "description": "The array type expected for readonly cases. If omitted, the value for `default` will be used."
                        }
                    },
                    "type": "object"
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/await-thenable",
            "description": "Disallow awaiting a value that is not a Thenable",
            "url": "https://typescript-eslint.io/rules/await-thenable",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-15T16:38:33.189Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/ban-ts-comment",
            "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
            "url": "https://typescript-eslint.io/rules/ban-ts-comment",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "directiveConfigSchema": {
                            "oneOf": [
                                {
                                    "type": "boolean",
                                    "default": true
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "allow-with-description"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "descriptionFormat": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "properties": {
                        "ts-expect-error": {
                            "$ref": "#/items/0/$defs/directiveConfigSchema"
                        },
                        "ts-ignore": {
                            "$ref": "#/items/0/$defs/directiveConfigSchema"
                        },
                        "ts-nocheck": {
                            "$ref": "#/items/0/$defs/directiveConfigSchema"
                        },
                        "ts-check": {
                            "$ref": "#/items/0/$defs/directiveConfigSchema"
                        },
                        "minimumDescriptionLength": {
                            "type": "number",
                            "default": 3
                        }
                    },
                    "type": "object",
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/ban-tslint-comment",
            "description": "Disallow `// tslint:<rule-flag>` comments",
            "url": "https://typescript-eslint.io/rules/ban-tslint-comment",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/ban-types",
            "description": "Disallow certain types",
            "url": "https://typescript-eslint.io/rules/ban-types",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "banConfig": {
                            "oneOf": [
                                {
                                    "type": "null",
                                    "description": "Bans the type with the default message"
                                },
                                {
                                    "type": "boolean",
                                    "enum": [
                                        false
                                    ],
                                    "description": "Un-bans the type (useful when paired with `extendDefaults`)"
                                },
                                {
                                    "type": "boolean",
                                    "enum": [
                                        true
                                    ],
                                    "description": "Bans the type with the default message"
                                },
                                {
                                    "type": "string",
                                    "description": "Bans the type with a custom message"
                                },
                                {
                                    "type": "object",
                                    "description": "Bans a type",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Custom error message"
                                        },
                                        "fixWith": {
                                            "type": "string",
                                            "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option."
                                        },
                                        "suggest": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Types to suggest replacing with.",
                                            "additionalItems": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    },
                    "type": "object",
                    "properties": {
                        "types": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/items/0/$defs/banConfig"
                            }
                        },
                        "extendDefaults": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-15T16:41:51.119Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/block-spacing",
            "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
            "url": "https://typescript-eslint.io/rules/block-spacing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/block-spacing"
            ],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/brace-style",
            "description": "Enforce consistent brace style for blocks",
            "url": "https://typescript-eslint.io/rules/brace-style",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/brace-style"
            ],
            "schema": [
                {
                    "enum": [
                        "1tbs",
                        "stroustrup",
                        "allman"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "allowSingleLine": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/class-literal-property-style",
            "description": "Enforce that literals on classes are exposed in a consistent style",
            "url": "https://typescript-eslint.io/rules/class-literal-property-style",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "fields",
                        "getters"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/class-methods-use-this",
            "description": "Enforce that class methods utilize `this`",
            "url": "https://typescript-eslint.io/rules/class-methods-use-this",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptMethods": {
                            "type": "array",
                            "description": "Allows specified method names to be ignored with this rule",
                            "items": {
                                "type": "string"
                            }
                        },
                        "enforceForClassFields": {
                            "type": "boolean",
                            "description": "Enforces that functions used as instance field initializers utilize `this`",
                            "default": true
                        },
                        "ignoreOverrideMethods": {
                            "type": "boolean",
                            "description": "Ingore members marked with the `override` modifier"
                        },
                        "ignoreClassesThatImplementAnInterface": {
                            "oneOf": [
                                {
                                    "type": "boolean",
                                    "description": "Ignore all classes that implement an interface"
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "public-fields"
                                    ],
                                    "description": "Ignore only the public fields of classes that implement an interface"
                                }
                            ],
                            "description": "Ignore classes that specifically implement some interface"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/comma-dangle",
            "description": "Require or disallow trailing commas",
            "url": "https://typescript-eslint.io/rules/comma-dangle",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/comma-dangle"
            ],
            "schema": {
                "$defs": {
                    "value": {
                        "type": "string",
                        "enum": [
                            "always-multiline",
                            "always",
                            "never",
                            "only-multiline"
                        ]
                    },
                    "valueWithIgnore": {
                        "type": "string",
                        "enum": [
                            "always-multiline",
                            "always",
                            "never",
                            "only-multiline",
                            "ignore"
                        ]
                    }
                },
                "type": "array",
                "items": [
                    {
                        "oneOf": [
                            {
                                "$ref": "#/$defs/value"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "arrays": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "objects": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "imports": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "exports": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "functions": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "enums": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "generics": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "tuples": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "additionalItems": false
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/comma-spacing",
            "description": "Enforce consistent spacing before and after commas",
            "url": "https://typescript-eslint.io/rules/comma-spacing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/comma-spacing"
            ],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": false
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/consistent-generic-constructors",
            "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
            "url": "https://typescript-eslint.io/rules/consistent-generic-constructors",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "type-annotation",
                        "constructor"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/consistent-indexed-object-style",
            "description": "Require or disallow the `Record` type",
            "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "record",
                        "index-signature"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/consistent-type-assertions",
            "description": "Enforce consistent usage of type assertions",
            "url": "https://typescript-eslint.io/rules/consistent-type-assertions",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "object",
                            "properties": {
                                "assertionStyle": {
                                    "type": "string",
                                    "enum": [
                                        "never"
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "assertionStyle"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "assertionStyle": {
                                    "type": "string",
                                    "enum": [
                                        "as",
                                        "angle-bracket"
                                    ]
                                },
                                "objectLiteralTypeAssertions": {
                                    "type": "string",
                                    "enum": [
                                        "allow",
                                        "allow-as-parameter",
                                        "never"
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "assertionStyle"
                            ]
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/consistent-type-definitions",
            "description": "Enforce type definitions to consistently use either `interface` or `type`",
            "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "interface",
                        "type"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/consistent-type-exports",
            "description": "Enforce consistent usage of type exports",
            "url": "https://typescript-eslint.io/rules/consistent-type-exports",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "fixMixedExportsWithInlineTypeSpecifier": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-15T16:56:32.950Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/consistent-type-imports",
            "description": "Enforce consistent usage of type imports",
            "url": "https://typescript-eslint.io/rules/consistent-type-imports",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "prefer": {
                            "type": "string",
                            "enum": [
                                "type-imports",
                                "no-type-imports"
                            ]
                        },
                        "disallowTypeAnnotations": {
                            "type": "boolean"
                        },
                        "fixStyle": {
                            "type": "string",
                            "enum": [
                                "separate-type-imports",
                                "inline-type-imports"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-15T16:58:46.158Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/default-param-last",
            "description": "Enforce default parameters to be last",
            "url": "https://typescript-eslint.io/rules/default-param-last",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/dot-notation",
            "description": "Enforce dot notation whenever possible",
            "url": "https://typescript-eslint.io/rules/dot-notation",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowKeywords": {
                            "type": "boolean",
                            "default": true
                        },
                        "allowPattern": {
                            "type": "string",
                            "default": ""
                        },
                        "allowPrivateClassPropertyAccess": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowProtectedClassPropertyAccess": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowIndexSignaturePropertyAccess": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/explicit-function-return-type",
            "description": "Require explicit return types on functions and class methods",
            "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                            "description": "Whether to allow arrow functions that start with the `void` keyword.",
                            "type": "boolean"
                        },
                        "allowExpressions": {
                            "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                            "type": "boolean"
                        },
                        "allowHigherOrderFunctions": {
                            "description": "Whether to ignore functions immediately returning another function expression.",
                            "type": "boolean"
                        },
                        "allowTypedFunctionExpressions": {
                            "description": "Whether to ignore type annotations on the variable of function expressions.",
                            "type": "boolean"
                        },
                        "allowDirectConstAssertionInArrowFunctions": {
                            "description": "Whether to ignore arrow functions immediately returning a `as const` value.",
                            "type": "boolean"
                        },
                        "allowFunctionsWithoutTypeParameters": {
                            "description": "Whether to ignore functions that don't have generic type parameters.",
                            "type": "boolean"
                        },
                        "allowedNames": {
                            "description": "An array of function/method names that will not have their arguments or return values checked.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "allowIIFEs": {
                            "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/explicit-member-accessibility",
            "description": "Require explicit accessibility modifiers on class properties and methods",
            "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "accessibilityLevel": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "explicit"
                                    ],
                                    "description": "Always require an accessor."
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "no-public"
                                    ],
                                    "description": "Require an accessor except when public."
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "off"
                                    ],
                                    "description": "Never check whether there is an accessor."
                                }
                            ]
                        }
                    },
                    "type": "object",
                    "properties": {
                        "accessibility": {
                            "$ref": "#/items/0/$defs/accessibilityLevel"
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "accessors": {
                                    "$ref": "#/items/0/$defs/accessibilityLevel"
                                },
                                "constructors": {
                                    "$ref": "#/items/0/$defs/accessibilityLevel"
                                },
                                "methods": {
                                    "$ref": "#/items/0/$defs/accessibilityLevel"
                                },
                                "properties": {
                                    "$ref": "#/items/0/$defs/accessibilityLevel"
                                },
                                "parameterProperties": {
                                    "$ref": "#/items/0/$defs/accessibilityLevel"
                                }
                            },
                            "additionalProperties": false
                        },
                        "ignoredMethodNames": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "accessibility": "explicit",
                    "overrides": {
                        "constructors": "off"
                    }
                }
            ],
            "updatedAt": "2024-01-15T17:13:21.513Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/explicit-module-boundary-types",
            "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
            "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowArgumentsExplicitlyTypedAsAny": {
                            "description": "Whether to ignore arguments that are explicitly typed as `any`.",
                            "type": "boolean"
                        },
                        "allowDirectConstAssertionInArrowFunctions": {
                            "description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function.",
                            "type": "boolean"
                        },
                        "allowedNames": {
                            "description": "An array of function/method names that will not have their arguments or return values checked.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "allowHigherOrderFunctions": {
                            "description": "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function.",
                            "type": "boolean"
                        },
                        "allowTypedFunctionExpressions": {
                            "description": "Whether to ignore type annotations on the variable of a function expresion.",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/func-call-spacing",
            "description": "Require or disallow spacing between function identifiers and their invocations",
            "url": "https://typescript-eslint.io/rules/func-call-spacing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/func-call-spacing"
            ],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "never"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "allowNewlines": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/indent",
            "description": "Enforce consistent indentation",
            "url": "https://typescript-eslint.io/rules/indent",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/indent"
            ],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "tab"
                            ]
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "SwitchCase": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        },
                        "VariableDeclarator": {
                            "oneOf": [
                                {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "var": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        },
                                        "let": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        },
                                        "const": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        "outerIIFEBody": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "MemberExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "FunctionDeclaration": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "FunctionExpression": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "StaticBlock": {
                            "type": "object",
                            "properties": {
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "CallExpression": {
                            "type": "object",
                            "properties": {
                                "arguments": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        "ArrayExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "ObjectExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "ImportDeclaration": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "flatTernaryExpressions": {
                            "type": "boolean",
                            "default": false
                        },
                        "offsetTernaryExpressions": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoredNodes": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "not": {
                                    "pattern": ":exit$"
                                }
                            }
                        },
                        "ignoreComments": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/init-declarations",
            "description": "Require or disallow initialization in variable declarations",
            "url": "https://typescript-eslint.io/rules/init-declarations",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ignoreForLoopInit": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/key-spacing",
            "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
            "url": "https://typescript-eslint.io/rules/key-spacing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/key-spacing"
            ],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "align": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "mode": {
                                                    "enum": [
                                                        "strict",
                                                        "minimum"
                                                    ]
                                                },
                                                "on": {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ]
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "afterColon": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "mode": {
                                    "enum": [
                                        "strict",
                                        "minimum"
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "afterColon": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "multiLine": {
                                    "type": "object",
                                    "properties": {
                                        "align": {
                                            "anyOf": [
                                                {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ]
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "mode": {
                                                            "enum": [
                                                                "strict",
                                                                "minimum"
                                                            ]
                                                        },
                                                        "on": {
                                                            "enum": [
                                                                "colon",
                                                                "value"
                                                            ]
                                                        },
                                                        "beforeColon": {
                                                            "type": "boolean"
                                                        },
                                                        "afterColon": {
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        },
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "multiLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "align": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "on": {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/keyword-spacing",
            "description": "Enforce consistent spacing before and after keywords",
            "url": "https://typescript-eslint.io/rules/keyword-spacing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/keyword-spacing"
            ],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": true
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "abstract": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "as": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "async": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "await": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "boolean": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "break": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "byte": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "case": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "catch": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "char": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "class": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "const": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "continue": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "debugger": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "default": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "delete": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "do": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "double": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "else": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "enum": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "export": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "extends": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "false": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "final": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "finally": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "float": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "for": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "from": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "function": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "get": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "goto": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "if": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "implements": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "import": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "in": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "instanceof": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "int": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "interface": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "let": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "long": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "native": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "new": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "null": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "of": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "package": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "private": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "protected": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "public": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "return": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "set": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "short": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "static": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "super": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "switch": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "synchronized": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "this": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "throw": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "throws": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "transient": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "true": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "try": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "typeof": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "var": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "void": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "volatile": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "while": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "with": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "yield": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "type": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/lines-around-comment",
            "description": "Require empty lines around comments",
            "url": "https://typescript-eslint.io/rules/lines-around-comment",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/lines-around-comment"
            ],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "beforeBlockComment": {
                            "type": "boolean",
                            "default": true
                        },
                        "afterBlockComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "beforeLineComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "afterLineComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowBlockStart": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowBlockEnd": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowClassStart": {
                            "type": "boolean"
                        },
                        "allowClassEnd": {
                            "type": "boolean"
                        },
                        "allowObjectStart": {
                            "type": "boolean"
                        },
                        "allowObjectEnd": {
                            "type": "boolean"
                        },
                        "allowArrayStart": {
                            "type": "boolean"
                        },
                        "allowArrayEnd": {
                            "type": "boolean"
                        },
                        "allowInterfaceStart": {
                            "type": "boolean"
                        },
                        "allowInterfaceEnd": {
                            "type": "boolean"
                        },
                        "allowTypeStart": {
                            "type": "boolean"
                        },
                        "allowTypeEnd": {
                            "type": "boolean"
                        },
                        "allowEnumStart": {
                            "type": "boolean"
                        },
                        "allowEnumEnd": {
                            "type": "boolean"
                        },
                        "allowModuleStart": {
                            "type": "boolean"
                        },
                        "allowModuleEnd": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "applyDefaultIgnorePatterns": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/lines-between-class-members",
            "description": "Require or disallow an empty line between class members",
            "url": "https://typescript-eslint.io/rules/lines-between-class-members",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/lines-between-class-members"
            ],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "enforce": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "blankLine": {
                                                "enum": [
                                                    "always",
                                                    "never"
                                                ]
                                            },
                                            "prev": {
                                                "enum": [
                                                    "method",
                                                    "field",
                                                    "*"
                                                ]
                                            },
                                            "next": {
                                                "enum": [
                                                    "method",
                                                    "field",
                                                    "*"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "blankLine",
                                            "prev",
                                            "next"
                                        ]
                                    },
                                    "minItems": 1
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "enforce"
                            ]
                        },
                        {
                            "enum": [
                                "always",
                                "never"
                            ]
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptAfterSingleLine": {
                            "type": "boolean",
                            "default": false
                        },
                        "exceptAfterOverload": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/max-params",
            "description": "Enforce a maximum number of parameters in function definitions",
            "url": "https://typescript-eslint.io/rules/max-params",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "maximum": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "max": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "countVoidThis": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/member-delimiter-style",
            "description": "Require a specific member delimiter style for interfaces and type literals",
            "url": "https://typescript-eslint.io/rules/member-delimiter-style",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/member-delimiter-style"
            ],
            "schema": [
                {
                    "$defs": {
                        "multiLineOption": {
                            "type": "string",
                            "enum": [
                                "none",
                                "semi",
                                "comma"
                            ]
                        },
                        "singleLineOption": {
                            "type": "string",
                            "enum": [
                                "semi",
                                "comma"
                            ]
                        },
                        "delimiterConfig": {
                            "type": "object",
                            "properties": {
                                "multiline": {
                                    "type": "object",
                                    "properties": {
                                        "delimiter": {
                                            "$ref": "#/items/0/$defs/multiLineOption"
                                        },
                                        "requireLast": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "singleline": {
                                    "type": "object",
                                    "properties": {
                                        "delimiter": {
                                            "$ref": "#/items/0/$defs/singleLineOption"
                                        },
                                        "requireLast": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "type": "object",
                    "properties": {
                        "multiline": {
                            "type": "object",
                            "properties": {
                                "delimiter": {
                                    "$ref": "#/items/0/$defs/multiLineOption"
                                },
                                "requireLast": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "singleline": {
                            "type": "object",
                            "properties": {
                                "delimiter": {
                                    "$ref": "#/items/0/$defs/singleLineOption"
                                },
                                "requireLast": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "interface": {
                                    "$ref": "#/items/0/$defs/delimiterConfig"
                                },
                                "typeLiteral": {
                                    "$ref": "#/items/0/$defs/delimiterConfig"
                                }
                            },
                            "additionalProperties": false
                        },
                        "multilineDetection": {
                            "type": "string",
                            "enum": [
                                "brackets",
                                "last-member"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/member-ordering",
            "description": "Require a consistent member declaration order",
            "url": "https://typescript-eslint.io/rules/member-ordering",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "orderOptions": {
                            "type": "string",
                            "enum": [
                                "alphabetically",
                                "alphabetically-case-insensitive",
                                "as-written",
                                "natural",
                                "natural-case-insensitive"
                            ]
                        },
                        "optionalityOrderOptions": {
                            "type": "string",
                            "enum": [
                                "optional-first",
                                "required-first"
                            ]
                        },
                        "allItems": {
                            "type": "string",
                            "enum": [
                                "readonly-signature",
                                "signature",
                                "readonly-field",
                                "public-readonly-field",
                                "public-decorated-readonly-field",
                                "decorated-readonly-field",
                                "static-readonly-field",
                                "public-static-readonly-field",
                                "instance-readonly-field",
                                "public-instance-readonly-field",
                                "abstract-readonly-field",
                                "public-abstract-readonly-field",
                                "protected-readonly-field",
                                "protected-decorated-readonly-field",
                                "protected-static-readonly-field",
                                "protected-instance-readonly-field",
                                "protected-abstract-readonly-field",
                                "private-readonly-field",
                                "private-decorated-readonly-field",
                                "private-static-readonly-field",
                                "private-instance-readonly-field",
                                "#private-readonly-field",
                                "#private-static-readonly-field",
                                "#private-instance-readonly-field",
                                "field",
                                "public-field",
                                "public-decorated-field",
                                "decorated-field",
                                "static-field",
                                "public-static-field",
                                "instance-field",
                                "public-instance-field",
                                "abstract-field",
                                "public-abstract-field",
                                "protected-field",
                                "protected-decorated-field",
                                "protected-static-field",
                                "protected-instance-field",
                                "protected-abstract-field",
                                "private-field",
                                "private-decorated-field",
                                "private-static-field",
                                "private-instance-field",
                                "#private-field",
                                "#private-static-field",
                                "#private-instance-field",
                                "method",
                                "public-method",
                                "public-decorated-method",
                                "decorated-method",
                                "static-method",
                                "public-static-method",
                                "instance-method",
                                "public-instance-method",
                                "abstract-method",
                                "public-abstract-method",
                                "protected-method",
                                "protected-decorated-method",
                                "protected-static-method",
                                "protected-instance-method",
                                "protected-abstract-method",
                                "private-method",
                                "private-decorated-method",
                                "private-static-method",
                                "private-instance-method",
                                "#private-method",
                                "#private-static-method",
                                "#private-instance-method",
                                "call-signature",
                                "constructor",
                                "public-constructor",
                                "protected-constructor",
                                "private-constructor",
                                "accessor",
                                "public-accessor",
                                "public-decorated-accessor",
                                "decorated-accessor",
                                "static-accessor",
                                "public-static-accessor",
                                "instance-accessor",
                                "public-instance-accessor",
                                "abstract-accessor",
                                "public-abstract-accessor",
                                "protected-accessor",
                                "protected-decorated-accessor",
                                "protected-static-accessor",
                                "protected-instance-accessor",
                                "protected-abstract-accessor",
                                "private-accessor",
                                "private-decorated-accessor",
                                "private-static-accessor",
                                "private-instance-accessor",
                                "#private-accessor",
                                "#private-static-accessor",
                                "#private-instance-accessor",
                                "get",
                                "public-get",
                                "public-decorated-get",
                                "decorated-get",
                                "static-get",
                                "public-static-get",
                                "instance-get",
                                "public-instance-get",
                                "abstract-get",
                                "public-abstract-get",
                                "protected-get",
                                "protected-decorated-get",
                                "protected-static-get",
                                "protected-instance-get",
                                "protected-abstract-get",
                                "private-get",
                                "private-decorated-get",
                                "private-static-get",
                                "private-instance-get",
                                "#private-get",
                                "#private-static-get",
                                "#private-instance-get",
                                "set",
                                "public-set",
                                "public-decorated-set",
                                "decorated-set",
                                "static-set",
                                "public-static-set",
                                "instance-set",
                                "public-instance-set",
                                "abstract-set",
                                "public-abstract-set",
                                "protected-set",
                                "protected-decorated-set",
                                "protected-static-set",
                                "protected-instance-set",
                                "protected-abstract-set",
                                "private-set",
                                "private-decorated-set",
                                "private-static-set",
                                "private-instance-set",
                                "#private-set",
                                "#private-static-set",
                                "#private-instance-set",
                                "static-initialization",
                                "static-static-initialization",
                                "public-static-static-initialization",
                                "instance-static-initialization",
                                "public-instance-static-initialization",
                                "abstract-static-initialization",
                                "public-abstract-static-initialization",
                                "protected-static-static-initialization",
                                "protected-instance-static-initialization",
                                "protected-abstract-static-initialization",
                                "private-static-static-initialization",
                                "private-instance-static-initialization",
                                "#private-static-static-initialization",
                                "#private-instance-static-initialization"
                            ]
                        },
                        "typeItems": {
                            "type": "string",
                            "enum": [
                                "readonly-signature",
                                "signature",
                                "readonly-field",
                                "field",
                                "method",
                                "constructor"
                            ]
                        },
                        "baseConfig": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "never"
                                    ]
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/items/0/$defs/allItems"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/items/0/$defs/allItems"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "memberTypes": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "oneOf": [
                                                            {
                                                                "$ref": "#/items/0/$defs/allItems"
                                                            },
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "$ref": "#/items/0/$defs/allItems"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "string",
                                                    "enum": [
                                                        "never"
                                                    ]
                                                }
                                            ]
                                        },
                                        "order": {
                                            "$ref": "#/items/0/$defs/orderOptions"
                                        },
                                        "optionalityOrder": {
                                            "$ref": "#/items/0/$defs/optionalityOrderOptions"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        "typesConfig": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "never"
                                    ]
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/items/0/$defs/typeItems"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/items/0/$defs/typeItems"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "memberTypes": {
                                            "oneOf": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "oneOf": [
                                                            {
                                                                "$ref": "#/items/0/$defs/typeItems"
                                                            },
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "$ref": "#/items/0/$defs/typeItems"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "string",
                                                    "enum": [
                                                        "never"
                                                    ]
                                                }
                                            ]
                                        },
                                        "order": {
                                            "$ref": "#/items/0/$defs/orderOptions"
                                        },
                                        "optionalityOrder": {
                                            "$ref": "#/items/0/$defs/optionalityOrderOptions"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    },
                    "type": "object",
                    "properties": {
                        "default": {
                            "$ref": "#/items/0/$defs/baseConfig"
                        },
                        "classes": {
                            "$ref": "#/items/0/$defs/baseConfig"
                        },
                        "classExpressions": {
                            "$ref": "#/items/0/$defs/baseConfig"
                        },
                        "interfaces": {
                            "$ref": "#/items/0/$defs/typesConfig"
                        },
                        "typeLiterals": {
                            "$ref": "#/items/0/$defs/typesConfig"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/method-signature-style",
            "description": "Enforce using a particular method signature syntax",
            "url": "https://typescript-eslint.io/rules/method-signature-style",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "property",
                        "method"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/naming-convention",
            "description": "Enforce naming conventions for everything across a codebase",
            "url": "https://typescript-eslint.io/rules/naming-convention",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": {
                "$defs": {
                    "underscoreOptions": {
                        "type": "string",
                        "enum": [
                            "forbid",
                            "allow",
                            "require",
                            "requireDouble",
                            "allowDouble",
                            "allowSingleOrDouble"
                        ]
                    },
                    "predefinedFormats": {
                        "type": "string",
                        "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                        ]
                    },
                    "typeModifiers": {
                        "type": "string",
                        "enum": [
                            "boolean",
                            "string",
                            "number",
                            "function",
                            "array"
                        ]
                    },
                    "prefixSuffixConfig": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "minLength": 1
                        },
                        "additionalItems": false
                    },
                    "matchRegexConfig": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "match": {
                                "type": "boolean"
                            },
                            "regex": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "match",
                            "regex"
                        ]
                    },
                    "formatOptionsConfig": {
                        "oneOf": [
                            {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/predefinedFormats"
                                },
                                "additionalItems": false
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "array",
                "items": {
                    "oneOf": [
                        {
                            "type": "object",
                            "description": "Multiple selectors in one config",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "default",
                                            "variableLike",
                                            "memberLike",
                                            "typeLike",
                                            "method",
                                            "property",
                                            "variable",
                                            "function",
                                            "parameter",
                                            "parameterProperty",
                                            "accessor",
                                            "enumMember",
                                            "classMethod",
                                            "objectLiteralMethod",
                                            "typeMethod",
                                            "classProperty",
                                            "objectLiteralProperty",
                                            "typeProperty",
                                            "class",
                                            "interface",
                                            "typeAlias",
                                            "enum",
                                            "typeParameter",
                                            "import"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "const",
                                            "readonly",
                                            "static",
                                            "public",
                                            "protected",
                                            "private",
                                            "#private",
                                            "abstract",
                                            "destructured",
                                            "global",
                                            "exported",
                                            "unused",
                                            "requiresQuotes",
                                            "override",
                                            "async",
                                            "default",
                                            "namespace"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'default'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "default"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "const",
                                            "readonly",
                                            "static",
                                            "public",
                                            "protected",
                                            "private",
                                            "#private",
                                            "abstract",
                                            "destructured",
                                            "global",
                                            "exported",
                                            "unused",
                                            "requiresQuotes",
                                            "override",
                                            "async",
                                            "default",
                                            "namespace"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'variableLike'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "variableLike"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "unused",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'variable'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "variable"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "const",
                                            "destructured",
                                            "exported",
                                            "global",
                                            "unused",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'function'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "function"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "exported",
                                            "global",
                                            "unused",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'parameter'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "parameter"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "destructured",
                                            "unused"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'memberLike'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "memberLike"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "private",
                                            "#private",
                                            "protected",
                                            "public",
                                            "readonly",
                                            "requiresQuotes",
                                            "static",
                                            "override",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'classProperty'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "classProperty"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "private",
                                            "#private",
                                            "protected",
                                            "public",
                                            "readonly",
                                            "requiresQuotes",
                                            "static",
                                            "override"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'objectLiteralProperty'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "objectLiteralProperty"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "public",
                                            "requiresQuotes"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'typeProperty'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "typeProperty"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "public",
                                            "readonly",
                                            "requiresQuotes"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'parameterProperty'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "parameterProperty"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "private",
                                            "protected",
                                            "public",
                                            "readonly"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'property'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "property"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "private",
                                            "#private",
                                            "protected",
                                            "public",
                                            "readonly",
                                            "requiresQuotes",
                                            "static",
                                            "override",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'classMethod'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "classMethod"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "private",
                                            "#private",
                                            "protected",
                                            "public",
                                            "requiresQuotes",
                                            "static",
                                            "override",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'objectLiteralMethod'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "objectLiteralMethod"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "public",
                                            "requiresQuotes",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'typeMethod'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "typeMethod"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "public",
                                            "requiresQuotes"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'method'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "method"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "private",
                                            "#private",
                                            "protected",
                                            "public",
                                            "requiresQuotes",
                                            "static",
                                            "override",
                                            "async"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'accessor'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "accessor"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "private",
                                            "protected",
                                            "public",
                                            "requiresQuotes",
                                            "static",
                                            "override"
                                        ]
                                    },
                                    "additionalItems": false
                                },
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/typeModifiers"
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'enumMember'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "enumMember"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "requiresQuotes"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'typeLike'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "typeLike"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "exported",
                                            "unused"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'class'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "class"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "abstract",
                                            "exported",
                                            "unused"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'interface'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "interface"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "exported",
                                            "unused"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'typeAlias'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "typeAlias"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "exported",
                                            "unused"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'enum'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "enum"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "exported",
                                            "unused"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'typeParameter'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "typeParameter"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "unused"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "description": "Selector 'import'",
                            "properties": {
                                "format": {
                                    "$ref": "#/$defs/formatOptionsConfig"
                                },
                                "custom": {
                                    "$ref": "#/$defs/matchRegexConfig"
                                },
                                "leadingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "trailingUnderscore": {
                                    "$ref": "#/$defs/underscoreOptions"
                                },
                                "prefix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "suffix": {
                                    "$ref": "#/$defs/prefixSuffixConfig"
                                },
                                "failureMessage": {
                                    "type": "string"
                                },
                                "filter": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "$ref": "#/$defs/matchRegexConfig"
                                        }
                                    ]
                                },
                                "selector": {
                                    "type": "string",
                                    "enum": [
                                        "import"
                                    ]
                                },
                                "modifiers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "default",
                                            "namespace"
                                        ]
                                    },
                                    "additionalItems": false
                                }
                            },
                            "required": [
                                "selector",
                                "format"
                            ],
                            "additionalProperties": false
                        }
                    ]
                },
                "additionalItems": false
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-array-constructor",
            "description": "Disallow generic `Array` constructors",
            "url": "https://typescript-eslint.io/rules/no-array-constructor",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-array-delete",
            "description": "Disallow using the `delete` operator on array values",
            "url": "https://typescript-eslint.io/rules/no-array-delete",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-20T04:56:22.992Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-base-to-string",
            "description": "Require `.toString()` to only be called on objects which provide useful information when stringified",
            "url": "https://typescript-eslint.io/rules/no-base-to-string",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoredTypeNames": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-confusing-non-null-assertion",
            "description": "Disallow non-null assertion in locations that may be confusing",
            "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-confusing-void-expression",
            "description": "Require expressions of type void to appear in statement position",
            "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreArrowShorthand": {
                            "type": "boolean"
                        },
                        "ignoreVoidOperator": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-dupe-class-members",
            "description": "Disallow duplicate class members",
            "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-duplicate-enum-values",
            "description": "Disallow duplicate enum member values",
            "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-duplicate-type-constituents",
            "description": "Disallow duplicate constituents of union or intersection types",
            "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "additionalProperties": false,
                    "type": "object",
                    "properties": {
                        "ignoreIntersections": {
                            "type": "boolean"
                        },
                        "ignoreUnions": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T17:28:42.687Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-dynamic-delete",
            "description": "Disallow using the `delete` operator on computed key expressions",
            "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-empty-function",
            "description": "Disallow empty functions",
            "url": "https://typescript-eslint.io/rules/no-empty-function",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "functions",
                                    "arrowFunctions",
                                    "generatorFunctions",
                                    "methods",
                                    "generatorMethods",
                                    "getters",
                                    "setters",
                                    "constructors",
                                    "private-constructors",
                                    "protected-constructors",
                                    "asyncFunctions",
                                    "asyncMethods",
                                    "decoratedFunctions",
                                    "overrideMethods"
                                ],
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-empty-interface",
            "description": "Disallow the declaration of empty interfaces",
            "url": "https://typescript-eslint.io/rules/no-empty-interface",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "allowSingleExtends": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-explicit-any",
            "description": "Disallow the `any` type",
            "url": "https://typescript-eslint.io/rules/no-explicit-any",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "fixToUnknown": {
                            "description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.",
                            "type": "boolean"
                        },
                        "ignoreRestArgs": {
                            "description": "Whether to ignore rest parameter arrays.",
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "ignoreRestArgs": true
                }
            ],
            "updatedAt": "2024-01-16T17:33:08.898Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-extra-non-null-assertion",
            "description": "Disallow extra non-null assertions",
            "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-extra-parens",
            "description": "Disallow unnecessary parentheses",
            "url": "https://typescript-eslint.io/rules/no-extra-parens",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/no-extra-parens"
            ],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "functions"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "all"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "conditionalAssign": {
                                        "type": "boolean"
                                    },
                                    "ternaryOperandBinaryExpressions": {
                                        "type": "boolean"
                                    },
                                    "nestedBinaryExpressions": {
                                        "type": "boolean"
                                    },
                                    "returnAssign": {
                                        "type": "boolean"
                                    },
                                    "ignoreJSX": {
                                        "enum": [
                                            "none",
                                            "all",
                                            "single-line",
                                            "multi-line"
                                        ]
                                    },
                                    "enforceForArrowConditionals": {
                                        "type": "boolean"
                                    },
                                    "enforceForSequenceExpressions": {
                                        "type": "boolean"
                                    },
                                    "enforceForNewInMemberExpressions": {
                                        "type": "boolean"
                                    },
                                    "enforceForFunctionPrototypeMethods": {
                                        "type": "boolean"
                                    },
                                    "allowParensAfterCommentPattern": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-extra-semi",
            "description": "Disallow unnecessary semicolons",
            "url": "https://typescript-eslint.io/rules/no-extra-semi",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/no-extra-semi"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-extraneous-class",
            "description": "Disallow classes used as namespaces",
            "url": "https://typescript-eslint.io/rules/no-extraneous-class",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "allowConstructorOnly": {
                            "description": "Whether to allow extraneous classes that contain only a constructor.",
                            "type": "boolean"
                        },
                        "allowEmpty": {
                            "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                            "type": "boolean"
                        },
                        "allowStaticOnly": {
                            "description": "Whether to allow extraneous classes that only contain static members.",
                            "type": "boolean"
                        },
                        "allowWithDecorator": {
                            "description": "Whether to allow extraneous classes that include a decorator.",
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-floating-promises",
            "description": "Require Promise-like statements to be handled appropriately",
            "url": "https://typescript-eslint.io/rules/no-floating-promises",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreVoid": {
                            "description": "Whether to ignore `void` expressions.",
                            "type": "boolean"
                        },
                        "ignoreIIFE": {
                            "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                {
                    "ignoreVoid": true,
                    "ignoreIIFE": true
                }
            ],
            "updatedAt": "2024-01-16T17:38:18.318Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-for-in-array",
            "description": "Disallow iterating over an array with a for-in loop",
            "url": "https://typescript-eslint.io/rules/no-for-in-array",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-implied-eval",
            "description": "Disallow the use of `eval()`-like methods",
            "url": "https://typescript-eslint.io/rules/no-implied-eval",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-import-type-side-effects",
            "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
            "url": "https://typescript-eslint.io/rules/no-import-type-side-effects",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-inferrable-types",
            "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
            "url": "https://typescript-eslint.io/rules/no-inferrable-types",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreParameters": {
                            "type": "boolean"
                        },
                        "ignoreProperties": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-invalid-this",
            "description": "Disallow `this` keywords outside of classes or class-like objects",
            "url": "https://typescript-eslint.io/rules/no-invalid-this",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "capIsConstructor": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-invalid-void-type",
            "description": "Disallow `void` type outside of generic or return types",
            "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowInGenericTypeArguments": {
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1
                                }
                            ]
                        },
                        "allowAsThisParameter": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-loop-func",
            "description": "Disallow function declarations that contain unsafe references inside loop statements",
            "url": "https://typescript-eslint.io/rules/no-loop-func",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-loss-of-precision",
            "description": "Disallow literal numbers that lose precision",
            "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T23:16:57.273Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-magic-numbers",
            "description": "Disallow magic numbers",
            "url": "https://typescript-eslint.io/rules/no-magic-numbers",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "detectObjects": {
                            "type": "boolean",
                            "default": false
                        },
                        "enforceConst": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignore": {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "string",
                                        "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                                    }
                                ]
                            },
                            "uniqueItems": true
                        },
                        "ignoreArrayIndexes": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreDefaultValues": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreClassFieldInitialValues": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreNumericLiteralTypes": {
                            "type": "boolean"
                        },
                        "ignoreEnums": {
                            "type": "boolean"
                        },
                        "ignoreReadonlyClassProperties": {
                            "type": "boolean"
                        },
                        "ignoreTypeIndexes": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-meaningless-void-operator",
            "description": "Disallow the `void` operator except when used to discard a value",
            "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "checkNever": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-misused-new",
            "description": "Enforce valid definition of `new` and `constructor`",
            "url": "https://typescript-eslint.io/rules/no-misused-new",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-misused-promises",
            "description": "Disallow Promises in places not designed to handle them",
            "url": "https://typescript-eslint.io/rules/no-misused-promises",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checksConditionals": {
                            "type": "boolean"
                        },
                        "checksVoidReturn": {
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "arguments": {
                                            "type": "boolean"
                                        },
                                        "attributes": {
                                            "type": "boolean"
                                        },
                                        "properties": {
                                            "type": "boolean"
                                        },
                                        "returns": {
                                            "type": "boolean"
                                        },
                                        "variables": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "checksSpreads": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [
                {
                    "checksVoidReturn": {
                        "attributes": false
                    }
                }
            ],
            "updatedAt": "2024-01-22T07:41:26.006Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-mixed-enums",
            "description": "Disallow enums from having both number and string members",
            "url": "https://typescript-eslint.io/rules/no-mixed-enums",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-namespace",
            "description": "Disallow TypeScript namespaces",
            "url": "https://typescript-eslint.io/rules/no-namespace",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowDeclarations": {
                            "description": "Whether to allow `declare` with custom TypeScript namespaces.",
                            "type": "boolean"
                        },
                        "allowDefinitionFiles": {
                            "description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files.",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-non-null-asserted-nullish-coalescing",
            "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
            "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-non-null-asserted-optional-chain",
            "description": "Disallow non-null assertions after an optional chain expression",
            "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-non-null-assertion",
            "description": "Disallow non-null assertions using the `!` postfix operator",
            "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T23:27:05.447Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-redeclare",
            "description": "Disallow variable redeclaration",
            "url": "https://typescript-eslint.io/rules/no-redeclare",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "builtinGlobals": {
                            "type": "boolean"
                        },
                        "ignoreDeclarationMerge": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-redundant-type-constituents",
            "description": "Disallow members of unions and intersections that do nothing or override type information",
            "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T23:29:54.705Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-require-imports",
            "description": "Disallow invocation of `require()`",
            "url": "https://typescript-eslint.io/rules/no-require-imports",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Patterns of import paths to allow requiring from."
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-restricted-imports",
            "description": "Disallow specified modules when loaded by `import`",
            "url": "https://typescript-eslint.io/rules/no-restricted-imports",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "importNames": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "allowTypeImports": {
                                            "type": "boolean",
                                            "description": "Disallow value imports, but allow type-only imports."
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ]
                                }
                            ]
                        },
                        "uniqueItems": true
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "object",
                                "properties": {
                                    "paths": {
                                        "type": "array",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "minLength": 1
                                                        },
                                                        "importNames": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "allowTypeImports": {
                                                            "type": "boolean",
                                                            "description": "Disallow value imports, but allow type-only imports."
                                                        }
                                                    },
                                                    "required": [
                                                        "name"
                                                    ]
                                                }
                                            ]
                                        },
                                        "uniqueItems": true
                                    },
                                    "patterns": {
                                        "anyOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "uniqueItems": true
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "importNames": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "minItems": 1,
                                                            "uniqueItems": true
                                                        },
                                                        "group": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "minItems": 1,
                                                            "uniqueItems": true
                                                        },
                                                        "importNamePattern": {
                                                            "type": "string"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "minLength": 1
                                                        },
                                                        "caseSensitive": {
                                                            "type": "boolean"
                                                        },
                                                        "allowTypeImports": {
                                                            "type": "boolean",
                                                            "description": "Disallow value imports, but allow type-only imports."
                                                        }
                                                    },
                                                    "required": [
                                                        "group"
                                                    ]
                                                },
                                                "uniqueItems": true
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "additionalItems": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-shadow",
            "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
            "url": "https://typescript-eslint.io/rules/no-shadow",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "builtinGlobals": {
                            "type": "boolean"
                        },
                        "hoist": {
                            "type": "string",
                            "enum": [
                                "all",
                                "functions",
                                "never"
                            ]
                        },
                        "allow": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ignoreOnInitialization": {
                            "type": "boolean"
                        },
                        "ignoreTypeValueShadow": {
                            "type": "boolean"
                        },
                        "ignoreFunctionTypeParameterNameValueShadow": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "hoist": "all"
                }
            ],
            "updatedAt": "2024-01-16T23:32:39.811Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-this-alias",
            "description": "Disallow aliasing `this`",
            "url": "https://typescript-eslint.io/rules/no-this-alias",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "allowDestructuring": {
                            "description": "Whether to ignore destructurings, such as `const { props, state } = this`.",
                            "type": "boolean"
                        },
                        "allowedNames": {
                            "description": "Names to ignore, such as [\"self\"] for `const self = this;`.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-throw-literal",
            "description": "Disallow throwing literals as exceptions",
            "url": "https://typescript-eslint.io/rules/no-throw-literal",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowThrowingAny": {
                            "type": "boolean"
                        },
                        "allowThrowingUnknown": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-16T23:37:02.062Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-type-alias",
            "description": "Disallow type aliases",
            "url": "https://typescript-eslint.io/rules/no-type-alias",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "expandedOptions": {
                            "type": "string",
                            "enum": [
                                "always",
                                "never",
                                "in-unions",
                                "in-intersections",
                                "in-unions-and-intersections"
                            ]
                        },
                        "simpleOptions": {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        }
                    },
                    "type": "object",
                    "properties": {
                        "allowAliases": {
                            "description": "Whether to allow direct one-to-one type aliases.",
                            "$ref": "#/items/0/$defs/expandedOptions"
                        },
                        "allowCallbacks": {
                            "description": "Whether to allow type aliases for callbacks.",
                            "$ref": "#/items/0/$defs/simpleOptions"
                        },
                        "allowConditionalTypes": {
                            "description": "Whether to allow type aliases for conditional types.",
                            "$ref": "#/items/0/$defs/simpleOptions"
                        },
                        "allowConstructors": {
                            "description": "Whether to allow type aliases with constructors.",
                            "$ref": "#/items/0/$defs/simpleOptions"
                        },
                        "allowLiterals": {
                            "description": "Whether to allow type aliases with object literal types.",
                            "$ref": "#/items/0/$defs/expandedOptions"
                        },
                        "allowMappedTypes": {
                            "description": "Whether to allow type aliases with mapped types.",
                            "$ref": "#/items/0/$defs/expandedOptions"
                        },
                        "allowTupleTypes": {
                            "description": "Whether to allow type aliases with tuple types.",
                            "$ref": "#/items/0/$defs/expandedOptions"
                        },
                        "allowGenerics": {
                            "description": "Whether to allow type aliases with generic types.",
                            "$ref": "#/items/0/$defs/simpleOptions"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unnecessary-boolean-literal-compare",
            "description": "Disallow unnecessary equality comparisons against boolean literals",
            "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowComparingNullableBooleansToTrue": {
                            "description": "Whether to allow comparisons between nullable boolean variables and `true`.",
                            "type": "boolean"
                        },
                        "allowComparingNullableBooleansToFalse": {
                            "description": "Whether to allow comparisons between nullable boolean variables and `false`.",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unnecessary-condition",
            "description": "Disallow conditionals where the type is always truthy or always falsy",
            "url": "https://typescript-eslint.io/rules/no-unnecessary-condition",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowConstantLoopConditions": {
                            "description": "Whether to ignore constant loop conditions, such as `while (true)`.",
                            "type": "boolean"
                        },
                        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                            "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "allowConstantLoopConditions": true
                }
            ],
            "updatedAt": "2024-01-16T23:55:31.881Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unnecessary-qualifier",
            "description": "Disallow unnecessary namespace qualifiers",
            "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unnecessary-type-arguments",
            "description": "Disallow type arguments that are equal to the default",
            "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unnecessary-type-assertion",
            "description": "Disallow type assertions that do not change the type of an expression",
            "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "typesToIgnore": {
                            "description": "A list of type names to ignore.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unnecessary-type-constraint",
            "description": "Disallow unnecessary constraints on generic types",
            "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-argument",
            "description": "Disallow calling a function with a value with type `any`",
            "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-assignment",
            "description": "Disallow assigning a value with type `any` to variables and properties",
            "url": "https://typescript-eslint.io/rules/no-unsafe-assignment",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:03:11.447Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-call",
            "description": "Disallow calling a value with type `any`",
            "url": "https://typescript-eslint.io/rules/no-unsafe-call",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-declaration-merging",
            "description": "Disallow unsafe declaration merging",
            "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-enum-comparison",
            "description": "Disallow comparing an enum value with a non-enum value",
            "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-member-access",
            "description": "Disallow member access on a value with type `any`",
            "url": "https://typescript-eslint.io/rules/no-unsafe-member-access",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:04:38.983Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-return",
            "description": "Disallow returning a value with type `any` from a function",
            "url": "https://typescript-eslint.io/rules/no-unsafe-return",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unsafe-unary-minus",
            "description": "Require unary negation to take a number",
            "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unused-expressions",
            "description": "Disallow unused expressions",
            "url": "https://typescript-eslint.io/rules/no-unused-expressions",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowShortCircuit": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowTernary": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowTaggedTemplates": {
                            "type": "boolean",
                            "default": false
                        },
                        "enforceForJSX": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-unused-vars",
            "description": "Disallow unused variables",
            "url": "https://typescript-eslint.io/rules/no-unused-vars",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "all",
                                "local"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "vars": {
                                    "type": "string",
                                    "enum": [
                                        "all",
                                        "local"
                                    ]
                                },
                                "varsIgnorePattern": {
                                    "type": "string"
                                },
                                "args": {
                                    "type": "string",
                                    "enum": [
                                        "all",
                                        "after-used",
                                        "none"
                                    ]
                                },
                                "ignoreRestSiblings": {
                                    "type": "boolean"
                                },
                                "argsIgnorePattern": {
                                    "type": "string"
                                },
                                "caughtErrors": {
                                    "type": "string",
                                    "enum": [
                                        "all",
                                        "none"
                                    ]
                                },
                                "caughtErrorsIgnorePattern": {
                                    "type": "string"
                                },
                                "destructuredArrayIgnorePattern": {
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [
                {
                    "argsIgnorePattern": "^_"
                }
            ],
            "updatedAt": "2024-01-22T04:25:34.053Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-use-before-define",
            "description": "Disallow the use of variables before they are defined",
            "url": "https://typescript-eslint.io/rules/no-use-before-define",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "nofunc"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "functions": {
                                    "type": "boolean"
                                },
                                "classes": {
                                    "type": "boolean"
                                },
                                "enums": {
                                    "type": "boolean"
                                },
                                "variables": {
                                    "type": "boolean"
                                },
                                "typedefs": {
                                    "type": "boolean"
                                },
                                "ignoreTypeReferences": {
                                    "type": "boolean"
                                },
                                "allowNamedExports": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:08:46.620Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-useless-constructor",
            "description": "Disallow unnecessary constructors",
            "url": "https://typescript-eslint.io/rules/no-useless-constructor",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-useless-empty-export",
            "description": "Disallow empty exports that don't change anything in a module file",
            "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-useless-template-literals",
            "description": "Disallow unnecessary template literals",
            "url": "https://typescript-eslint.io/rules/no-useless-template-literals",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/no-var-requires",
            "description": "Disallow `require` statements except in import statements",
            "url": "https://typescript-eslint.io/rules/no-var-requires",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Patterns of import paths to allow requiring from."
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/non-nullable-type-assertion-style",
            "description": "Enforce non-null assertions over explicit type casts",
            "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/object-curly-spacing",
            "description": "Enforce consistent spacing inside braces",
            "url": "https://typescript-eslint.io/rules/object-curly-spacing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/object-curly-spacing"
            ],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "arraysInObjects": {
                            "type": "boolean"
                        },
                        "objectsInObjects": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/padding-line-between-statements",
            "description": "Require or disallow padding lines between statements",
            "url": "https://typescript-eslint.io/rules/padding-line-between-statements",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/padding-line-between-statements"
            ],
            "schema": {
                "$defs": {
                    "paddingType": {
                        "type": "string",
                        "enum": [
                            "any",
                            "never",
                            "always"
                        ]
                    },
                    "statementType": {
                        "anyOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "*",
                                    "block-like",
                                    "exports",
                                    "require",
                                    "directive",
                                    "expression",
                                    "iife",
                                    "multiline-block-like",
                                    "multiline-expression",
                                    "multiline-const",
                                    "multiline-let",
                                    "multiline-var",
                                    "singleline-const",
                                    "singleline-let",
                                    "singleline-var",
                                    "block",
                                    "empty",
                                    "function",
                                    "break",
                                    "case",
                                    "class",
                                    "const",
                                    "continue",
                                    "debugger",
                                    "default",
                                    "do",
                                    "export",
                                    "for",
                                    "if",
                                    "import",
                                    "let",
                                    "return",
                                    "switch",
                                    "throw",
                                    "try",
                                    "var",
                                    "while",
                                    "with",
                                    "interface",
                                    "type"
                                ]
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "*",
                                        "block-like",
                                        "exports",
                                        "require",
                                        "directive",
                                        "expression",
                                        "iife",
                                        "multiline-block-like",
                                        "multiline-expression",
                                        "multiline-const",
                                        "multiline-let",
                                        "multiline-var",
                                        "singleline-const",
                                        "singleline-let",
                                        "singleline-var",
                                        "block",
                                        "empty",
                                        "function",
                                        "break",
                                        "case",
                                        "class",
                                        "const",
                                        "continue",
                                        "debugger",
                                        "default",
                                        "do",
                                        "export",
                                        "for",
                                        "if",
                                        "import",
                                        "let",
                                        "return",
                                        "switch",
                                        "throw",
                                        "try",
                                        "var",
                                        "while",
                                        "with",
                                        "interface",
                                        "type"
                                    ]
                                },
                                "minItems": 1,
                                "uniqueItems": true,
                                "additionalItems": false
                            }
                        ]
                    }
                },
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "object",
                    "properties": {
                        "blankLine": {
                            "$ref": "#/$defs/paddingType"
                        },
                        "prev": {
                            "$ref": "#/$defs/statementType"
                        },
                        "next": {
                            "$ref": "#/$defs/statementType"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "blankLine",
                        "prev",
                        "next"
                    ]
                }
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/parameter-properties",
            "description": "Require or disallow parameter properties in class constructors",
            "url": "https://typescript-eslint.io/rules/parameter-properties",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "modifier": {
                            "type": "string",
                            "enum": [
                                "readonly",
                                "private",
                                "protected",
                                "public",
                                "private readonly",
                                "protected readonly",
                                "public readonly"
                            ]
                        }
                    },
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "$ref": "#/items/0/$defs/modifier"
                            }
                        },
                        "prefer": {
                            "type": "string",
                            "enum": [
                                "class-property",
                                "parameter-property"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-as-const",
            "description": "Enforce the use of `as const` over literal type",
            "url": "https://typescript-eslint.io/rules/prefer-as-const",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:13:12.310Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-destructuring",
            "description": "Require destructuring from arrays and/or objects",
            "url": "https://typescript-eslint.io/rules/prefer-destructuring",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "object",
                            "properties": {
                                "VariableDeclarator": {
                                    "type": "object",
                                    "properties": {
                                        "array": {
                                            "type": "boolean"
                                        },
                                        "object": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "AssignmentExpression": {
                                    "type": "object",
                                    "properties": {
                                        "array": {
                                            "type": "boolean"
                                        },
                                        "object": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "array": {
                                    "type": "boolean"
                                },
                                "object": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "enforceForRenamedProperties": {
                            "type": "boolean"
                        },
                        "enforceForDeclarationWithTypeAnnotation": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-enum-initializers",
            "description": "Require each enum member value to be explicitly initialized",
            "url": "https://typescript-eslint.io/rules/prefer-enum-initializers",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-for-of",
            "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
            "url": "https://typescript-eslint.io/rules/prefer-for-of",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-function-type",
            "description": "Enforce using function types instead of interfaces with call signatures",
            "url": "https://typescript-eslint.io/rules/prefer-function-type",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-includes",
            "description": "Enforce `includes` method over `indexOf` method",
            "url": "https://typescript-eslint.io/rules/prefer-includes",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-literal-enum-member",
            "description": "Require all enum members to be literal values",
            "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowBitwiseExpressions": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-namespace-keyword",
            "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
            "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-nullish-coalescing",
            "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
            "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                            "type": "boolean"
                        },
                        "ignoreConditionalTests": {
                            "type": "boolean"
                        },
                        "ignoreMixedLogicalExpressions": {
                            "type": "boolean"
                        },
                        "ignorePrimitives": {
                            "oneOf": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "bigint": {
                                            "type": "boolean"
                                        },
                                        "boolean": {
                                            "type": "boolean"
                                        },
                                        "number": {
                                            "type": "boolean"
                                        },
                                        "string": {
                                            "type": "boolean"
                                        }
                                    }
                                },
                                {
                                    "type": "boolean",
                                    "enum": [
                                        true
                                    ]
                                }
                            ]
                        },
                        "ignoreTernaryTests": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "ignoreTernaryTests": true,
                    "ignoreConditionalTests": true,
                    "ignoreMixedLogicalExpressions": true
                }
            ],
            "updatedAt": "2024-01-17T00:21:29.943Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-optional-chain",
            "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
            "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkAny": {
                            "type": "boolean",
                            "description": "Check operands that are typed as `any` when inspecting \"loose boolean\" operands."
                        },
                        "checkUnknown": {
                            "type": "boolean",
                            "description": "Check operands that are typed as `unknown` when inspecting \"loose boolean\" operands."
                        },
                        "checkString": {
                            "type": "boolean",
                            "description": "Check operands that are typed as `string` when inspecting \"loose boolean\" operands."
                        },
                        "checkNumber": {
                            "type": "boolean",
                            "description": "Check operands that are typed as `number` when inspecting \"loose boolean\" operands."
                        },
                        "checkBoolean": {
                            "type": "boolean",
                            "description": "Check operands that are typed as `boolean` when inspecting \"loose boolean\" operands."
                        },
                        "checkBigInt": {
                            "type": "boolean",
                            "description": "Check operands that are typed as `bigint` when inspecting \"loose boolean\" operands."
                        },
                        "requireNullish": {
                            "type": "boolean",
                            "description": "Skip operands that are not typed with `null` and/or `undefined` when inspecting \"loose boolean\" operands."
                        },
                        "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                            "type": "boolean",
                            "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build."
                        }
                    }
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:37:33.451Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-promise-reject-errors",
            "description": "Require using Error objects as Promise rejection reasons",
            "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowEmptyReject": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-20T04:56:22.992Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-readonly",
            "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
            "url": "https://typescript-eslint.io/rules/prefer-readonly",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "onlyInlineLambdas": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-readonly-parameter-types",
            "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
            "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                            "from": {
                                                "type": "string",
                                                "enum": [
                                                    "file"
                                                ]
                                            },
                                            "name": {
                                                "oneOf": [
                                                    {
                                                        "type": "string"
                                                    },
                                                    {
                                                        "type": "array",
                                                        "minItems": 1,
                                                        "uniqueItems": true,
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                ]
                                            },
                                            "path": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "from",
                                            "name"
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                            "from": {
                                                "type": "string",
                                                "enum": [
                                                    "lib"
                                                ]
                                            },
                                            "name": {
                                                "oneOf": [
                                                    {
                                                        "type": "string"
                                                    },
                                                    {
                                                        "type": "array",
                                                        "minItems": 1,
                                                        "uniqueItems": true,
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "required": [
                                            "from",
                                            "name"
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                            "from": {
                                                "type": "string",
                                                "enum": [
                                                    "package"
                                                ]
                                            },
                                            "name": {
                                                "oneOf": [
                                                    {
                                                        "type": "string"
                                                    },
                                                    {
                                                        "type": "array",
                                                        "minItems": 1,
                                                        "uniqueItems": true,
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                ]
                                            },
                                            "package": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "from",
                                            "name",
                                            "package"
                                        ]
                                    }
                                ]
                            }
                        },
                        "checkParameterProperties": {
                            "type": "boolean"
                        },
                        "ignoreInferredTypes": {
                            "type": "boolean"
                        },
                        "treatMethodsAsReadonly": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-reduce-type-parameter",
            "description": "Enforce using type parameter when calling `Array#reduce` instead of casting",
            "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-regexp-exec",
            "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
            "url": "https://typescript-eslint.io/rules/prefer-regexp-exec",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-return-this-type",
            "description": "Enforce that `this` is used when only `this` type is returned",
            "url": "https://typescript-eslint.io/rules/prefer-return-this-type",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-string-starts-ends-with",
            "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
            "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/prefer-ts-expect-error",
            "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
            "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:42:01.301Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/promise-function-async",
            "description": "Require any function or method that returns a Promise to be marked async",
            "url": "https://typescript-eslint.io/rules/promise-function-async",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowAny": {
                            "description": "Whether to consider `any` and `unknown` to be Promises.",
                            "type": "boolean"
                        },
                        "allowedPromiseNames": {
                            "description": "Any extra names of classes or interfaces to be considered Promises.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "checkArrowFunctions": {
                            "type": "boolean"
                        },
                        "checkFunctionDeclarations": {
                            "type": "boolean"
                        },
                        "checkFunctionExpressions": {
                            "type": "boolean"
                        },
                        "checkMethodDeclarations": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/quotes",
            "description": "Enforce the consistent use of either backticks, double, or single quotes",
            "url": "https://typescript-eslint.io/rules/quotes",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/quotes"
            ],
            "schema": [
                {
                    "enum": [
                        "single",
                        "double",
                        "backtick"
                    ]
                },
                {
                    "anyOf": [
                        {
                            "enum": [
                                "avoid-escape"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "avoidEscape": {
                                    "type": "boolean"
                                },
                                "allowTemplateLiterals": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/require-array-sort-compare",
            "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
            "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "ignoreStringArrays": {
                            "description": "Whether to ignore arrays in which all elements are strings.",
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/require-await",
            "description": "Disallow async functions which have no `await` expression",
            "url": "https://typescript-eslint.io/rules/require-await",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:46:07.806Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/restrict-plus-operands",
            "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
            "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "allowAny": {
                            "description": "Whether to allow `any` typed values.",
                            "type": "boolean"
                        },
                        "allowBoolean": {
                            "description": "Whether to allow `boolean` typed values.",
                            "type": "boolean"
                        },
                        "allowNullish": {
                            "description": "Whether to allow potentially `null` or `undefined` typed values.",
                            "type": "boolean"
                        },
                        "allowNumberAndString": {
                            "description": "Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.",
                            "type": "boolean"
                        },
                        "allowRegExp": {
                            "description": "Whether to allow `regexp` typed values.",
                            "type": "boolean"
                        },
                        "skipCompoundAssignments": {
                            "description": "Whether to skip compound assignments such as `+=`.",
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/restrict-template-expressions",
            "description": "Enforce template literal expressions to be of `string` type",
            "url": "https://typescript-eslint.io/rules/restrict-template-expressions",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "allowAny": {
                            "description": "Whether to allow `any` typed values in template expressions.",
                            "type": "boolean"
                        },
                        "allowBoolean": {
                            "description": "Whether to allow `boolean` typed values in template expressions.",
                            "type": "boolean"
                        },
                        "allowNullish": {
                            "description": "Whether to allow `nullish` typed values in template expressions.",
                            "type": "boolean"
                        },
                        "allowNumber": {
                            "description": "Whether to allow `number` typed values in template expressions.",
                            "type": "boolean"
                        },
                        "allowRegExp": {
                            "description": "Whether to allow `regexp` typed values in template expressions.",
                            "type": "boolean"
                        },
                        "allowNever": {
                            "description": "Whether to allow `never` typed values in template expressions.",
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/return-await",
            "description": "Enforce consistent returning of awaited values",
            "url": "https://typescript-eslint.io/rules/return-await",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": "no-return-await",
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "in-try-catch",
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T00:51:27.883Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/semi",
            "description": "Require or disallow semicolons instead of ASI",
            "url": "https://typescript-eslint.io/rules/semi",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/semi"
            ],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "beforeStatementContinuationChars": {
                                        "enum": [
                                            "always",
                                            "any",
                                            "never"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "omitLastInOneLineBlock": {
                                        "type": "boolean"
                                    },
                                    "omitLastInOneLineClassBody": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/sort-type-constituents",
            "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
            "url": "https://typescript-eslint.io/rules/sort-type-constituents",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkIntersections": {
                            "description": "Whether to check intersection types.",
                            "type": "boolean"
                        },
                        "checkUnions": {
                            "description": "Whether to check union types.",
                            "type": "boolean"
                        },
                        "groupOrder": {
                            "description": "Ordering of the groups.",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "conditional",
                                    "function",
                                    "import",
                                    "intersection",
                                    "keyword",
                                    "nullish",
                                    "literal",
                                    "named",
                                    "object",
                                    "operator",
                                    "tuple",
                                    "union"
                                ]
                            }
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/space-before-blocks",
            "description": "Enforce consistent spacing before blocks",
            "url": "https://typescript-eslint.io/rules/space-before-blocks",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/space-before-blocks"
            ],
            "schema": [
                {
                    "oneOf": [
                        {
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "keywords": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                },
                                "functions": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                },
                                "classes": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/space-before-function-paren",
            "description": "Enforce consistent spacing before function parenthesis",
            "url": "https://typescript-eslint.io/rules/space-before-function-paren",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/space-before-function-paren"
            ],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "anonymous": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "named": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "asyncArrow": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/space-infix-ops",
            "description": "Require spacing around infix operators",
            "url": "https://typescript-eslint.io/rules/space-infix-ops",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/space-infix-ops"
            ],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "int32Hint": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/strict-boolean-expressions",
            "description": "Disallow certain types in boolean expressions",
            "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowString": {
                            "type": "boolean"
                        },
                        "allowNumber": {
                            "type": "boolean"
                        },
                        "allowNullableObject": {
                            "type": "boolean"
                        },
                        "allowNullableBoolean": {
                            "type": "boolean"
                        },
                        "allowNullableString": {
                            "type": "boolean"
                        },
                        "allowNullableNumber": {
                            "type": "boolean"
                        },
                        "allowNullableEnum": {
                            "type": "boolean"
                        },
                        "allowAny": {
                            "type": "boolean"
                        },
                        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/switch-exhaustiveness-check",
            "description": "Require switch-case statements to be exhaustive",
            "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowDefaultCaseForExhaustiveSwitch": {
                            "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
                            "type": "boolean"
                        },
                        "requireDefaultForNonUnion": {
                            "description": "If 'true', require a 'default' clause for switches on non-union types.",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "requireDefaultForNonUnion": true
                }
            ],
            "updatedAt": "2024-01-17T00:54:07.118Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/triple-slash-reference",
            "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
            "url": "https://typescript-eslint.io/rules/triple-slash-reference",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "lib": {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        "path": {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        "types": {
                            "type": "string",
                            "enum": [
                                "always",
                                "never",
                                "prefer-import"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/type-annotation-spacing",
            "description": "Require consistent spacing around type annotations",
            "url": "https://typescript-eslint.io/rules/type-annotation-spacing",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "@stylistic/ts/type-annotation-spacing"
            ],
            "schema": [
                {
                    "$defs": {
                        "spacingConfig": {
                            "type": "object",
                            "properties": {
                                "before": {
                                    "type": "boolean"
                                },
                                "after": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean"
                        },
                        "after": {
                            "type": "boolean"
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "colon": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "arrow": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "variable": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "parameter": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "property": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "returnType": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/typedef",
            "description": "Require type annotations in certain places",
            "url": "https://typescript-eslint.io/rules/typedef",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "arrayDestructuring": {
                            "type": "boolean"
                        },
                        "arrowParameter": {
                            "type": "boolean"
                        },
                        "memberVariableDeclaration": {
                            "type": "boolean"
                        },
                        "objectDestructuring": {
                            "type": "boolean"
                        },
                        "parameter": {
                            "type": "boolean"
                        },
                        "propertyDeclaration": {
                            "type": "boolean"
                        },
                        "variableDeclaration": {
                            "type": "boolean"
                        },
                        "variableDeclarationIgnoreFunction": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/unbound-method",
            "description": "Enforce unbound methods are called with their expected scope",
            "url": "https://typescript-eslint.io/rules/unbound-method",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": "recommended",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": true,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreStatic": {
                            "description": "Whether to skip checking whether `static` methods are correctly bound.",
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@typescript-eslint/unified-signatures",
            "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
            "url": "https://typescript-eslint.io/rules/unified-signatures",
            "library": "@typescript-eslint/eslint-plugin",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": "strict",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "ignoreDifferentlyNamedParameters": {
                            "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/better-regex",
            "description": "Improve regexes by making them shorter, consistent, and safer.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/better-regex.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "sortCharacterClasses": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/catch-error-name",
            "description": "Enforce a specific parameter name in catch clauses.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/catch-error-name.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "ignore": {
                            "type": "array",
                            "uniqueItems": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/consistent-destructuring",
            "description": "Use destructured variables over properties.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/consistent-destructuring.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/consistent-function-scoping",
            "description": "Move function definitions to the highest possible scope.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/consistent-function-scoping.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkArrowFunctions": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/custom-error-definition",
            "description": "Enforce correct `Error` subclassing.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/custom-error-definition.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/empty-brace-spaces",
            "description": "Enforce no spaces between braces.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/empty-brace-spaces.md",
            "library": "eslint-plugin-unicorn",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/error-message",
            "description": "Enforce passing a `message` value when creating a built-in error.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/error-message.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/escape-case",
            "description": "Require escape sequences to use uppercase values.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/escape-case.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/expiring-todo-comments",
            "description": "Add expiration conditions to TODO comments.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/expiring-todo-comments.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "terms": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ignore": {
                            "type": "array",
                            "uniqueItems": true
                        },
                        "ignoreDatesOnPullRequests": {
                            "type": "boolean",
                            "default": true
                        },
                        "allowWarningComments": {
                            "type": "boolean",
                            "default": false
                        },
                        "date": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/explicit-length-check",
            "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/explicit-length-check.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "non-zero": {
                            "enum": [
                                "greater-than",
                                "not-equal"
                            ],
                            "default": "greater-than"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/filename-case",
            "description": "Enforce a case style for filenames.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/filename-case.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "properties": {
                                "case": {
                                    "enum": [
                                        "camelCase",
                                        "snakeCase",
                                        "kebabCase",
                                        "pascalCase"
                                    ]
                                },
                                "ignore": {
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "properties": {
                                "cases": {
                                    "properties": {
                                        "camelCase": {
                                            "type": "boolean"
                                        },
                                        "snakeCase": {
                                            "type": "boolean"
                                        },
                                        "kebabCase": {
                                            "type": "boolean"
                                        },
                                        "pascalCase": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "ignore": {
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/import-index",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#import-index",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/import-style",
            "description": "Enforce specific import styles per module.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/import-style.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "additionalItems": false,
                "items": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkImport": {
                                "type": "boolean"
                            },
                            "checkDynamicImport": {
                                "type": "boolean"
                            },
                            "checkExportFrom": {
                                "type": "boolean"
                            },
                            "checkRequire": {
                                "type": "boolean"
                            },
                            "extendDefaultStyles": {
                                "type": "boolean"
                            },
                            "styles": {
                                "$ref": "#/definitions/moduleStyles"
                            }
                        }
                    }
                ],
                "definitions": {
                    "moduleStyles": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/definitions/styles"
                        }
                    },
                    "styles": {
                        "anyOf": [
                            {
                                "enum": [
                                    false
                                ]
                            },
                            {
                                "$ref": "#/definitions/booleanObject"
                            }
                        ]
                    },
                    "booleanObject": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    }
                }
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/new-for-builtins",
            "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/new-for-builtins.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T22:06:07.973Z",
            "note": null
        },
        {
            "name": "unicorn/no-abusive-eslint-disable",
            "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-abusive-eslint-disable.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-array-callback-reference",
            "description": "Prevent passing a function reference directly to iterator methods.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-array-callback-reference.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-array-for-each",
            "description": "Prefer `for…of` over the `forEach` method.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-array-for-each.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-array-instanceof",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#no-array-instanceof",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/no-instanceof-array"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-array-method-this-argument",
            "description": "Disallow using the `this` argument in array methods.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-array-method-this-argument.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-array-push-push",
            "description": "Enforce combining multiple `Array#push()` into one call.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-array-push-push.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "ignore": {
                            "type": "array",
                            "uniqueItems": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-array-reduce",
            "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-array-reduce.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "allowSimpleOperations": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-await-expression-member",
            "description": "Disallow member access from await expression.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-await-expression-member.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-console-spaces",
            "description": "Do not use leading/trailing space between `console.log` parameters.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-console-spaces.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-document-cookie",
            "description": "Do not use `document.cookie` directly.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-document-cookie.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-empty-file",
            "description": "Disallow empty files.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-empty-file.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-fn-reference-in-iterator",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#no-fn-reference-in-iterator",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/no-array-callback-reference"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-for-loop",
            "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-for-loop.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-hex-escape",
            "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-hex-escape.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-instanceof-array",
            "description": "Require `Array.isArray()` instead of `instanceof Array`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-instanceof-array.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-invalid-remove-event-listener",
            "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-invalid-remove-event-listener.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T22:13:46.129Z",
            "note": null
        },
        {
            "name": "unicorn/no-keyword-prefix",
            "description": "Disallow identifiers starting with `new` or `class`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-keyword-prefix.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "disallowedPrefixes": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                }
                            ],
                            "minItems": 0,
                            "uniqueItems": true
                        },
                        "checkProperties": {
                            "type": "boolean"
                        },
                        "onlyCamelCase": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-lonely-if",
            "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-lonely-if.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-negated-condition",
            "description": "Disallow negated conditions.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-negated-condition.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-nested-ternary",
            "description": "Disallow nested ternary expressions.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-nested-ternary.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-new-array",
            "description": "Disallow `new Array()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-new-array.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-new-buffer",
            "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-new-buffer.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T22:18:39.973Z",
            "note": null
        },
        {
            "name": "unicorn/no-null",
            "description": "Disallow the use of the `null` literal.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-null.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkStrictEquality": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-object-as-default-parameter",
            "description": "Disallow the use of objects as default parameters.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-object-as-default-parameter.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-process-exit",
            "description": "Disallow `process.exit()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-process-exit.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-reduce",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#no-reduce",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/no-array-reduce"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-static-only-class",
            "description": "Disallow classes that only have static members.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-static-only-class.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-thenable",
            "description": "Disallow `then` property.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-thenable.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-this-assignment",
            "description": "Disallow assigning `this` to a variable.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-this-assignment.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-typeof-undefined",
            "description": "Disallow comparing `undefined` using `typeof`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-typeof-undefined.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkGlobalVariables": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-unnecessary-await",
            "description": "Disallow awaiting non-promise values.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-unnecessary-await.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T22:22:46.968Z",
            "note": null
        },
        {
            "name": "unicorn/no-unnecessary-polyfills",
            "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-unnecessary-polyfills.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                        "targets"
                    ],
                    "properties": {
                        "targets": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array"
                                },
                                {
                                    "type": "object"
                                }
                            ]
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-unreadable-array-destructuring",
            "description": "Disallow unreadable array destructuring.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-unreadable-array-destructuring.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-unreadable-iife",
            "description": "Disallow unreadable IIFEs.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-unreadable-iife.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-unsafe-regex",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#no-unsafe-regex",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-unused-properties",
            "description": "Disallow unused object properties.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-unused-properties.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-useless-fallback-in-spread",
            "description": "Disallow useless fallback when spreading in object literals.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-useless-fallback-in-spread.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T22:24:47.714Z",
            "note": null
        },
        {
            "name": "unicorn/no-useless-length-check",
            "description": "Disallow useless array length check.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-useless-length-check.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-useless-promise-resolve-reject",
            "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-useless-promise-resolve-reject.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-useless-spread",
            "description": "Disallow unnecessary spread.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-useless-spread.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-useless-switch-case",
            "description": "Disallow useless case in switch statements.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-useless-switch-case.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-useless-undefined",
            "description": "Disallow useless `undefined`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-useless-undefined.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkArguments": {
                            "type": "boolean"
                        },
                        "checkArrowFunctionBody": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/no-zero-fractions",
            "description": "Disallow number literals with zero fractions or dangling dots.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/no-zero-fractions.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/number-literal-case",
            "description": "Enforce proper case for numeric literals.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/number-literal-case.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/numeric-separators-style",
            "description": "Enforce the style of numeric separators by correctly grouping digits.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/numeric-separators-style.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "binary": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "onlyIfContainsSeparator": {
                                    "type": "boolean"
                                },
                                "minimumDigits": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "default": 0
                                },
                                "groupLength": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "default": 4
                                }
                            }
                        },
                        "octal": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "onlyIfContainsSeparator": {
                                    "type": "boolean"
                                },
                                "minimumDigits": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "default": 0
                                },
                                "groupLength": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "default": 4
                                }
                            }
                        },
                        "hexadecimal": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "onlyIfContainsSeparator": {
                                    "type": "boolean"
                                },
                                "minimumDigits": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "default": 0
                                },
                                "groupLength": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "default": 2
                                }
                            }
                        },
                        "number": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "onlyIfContainsSeparator": {
                                    "type": "boolean"
                                },
                                "minimumDigits": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "default": 5
                                },
                                "groupLength": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "default": 3
                                }
                            }
                        },
                        "onlyIfContainsSeparator": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-add-event-listener",
            "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-add-event-listener.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "excludedPackages": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-array-find",
            "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-array-find.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkFromLast": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-array-flat",
            "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-array-flat.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "functions": {
                            "type": "array",
                            "uniqueItems": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-array-flat-map",
            "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-array-flat-map.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-array-index-of",
            "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-array-index-of.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-array-some",
            "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast}(…)`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-array-some.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-at",
            "description": "Prefer `.at()` method for index access and `String#charAt()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-at.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "getLastElementFunctions": {
                            "type": "array",
                            "uniqueItems": true
                        },
                        "checkAllIndexAccess": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-blob-reading-methods",
            "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-blob-reading-methods.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-code-point",
            "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-code-point.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-dataset",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-dataset",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-dom-node-dataset"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-date-now",
            "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-date-now.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-default-parameters",
            "description": "Prefer default parameters over reassignment.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-default-parameters.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-dom-node-append",
            "description": "Prefer `Node#append()` over `Node#appendChild()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-dom-node-append.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-dom-node-dataset",
            "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-dom-node-dataset.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-dom-node-remove",
            "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-dom-node-remove.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-dom-node-text-content",
            "description": "Prefer `.textContent` over `.innerText`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-dom-node-text-content.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-event-key",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-event-key",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-keyboard-event-key"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-event-target",
            "description": "Prefer `EventTarget` over `EventEmitter`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-event-target.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-exponentiation-operator",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-exponentiation-operator",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "prefer-exponentiation-operator"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-export-from",
            "description": "Prefer `export…from` when re-exporting.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-export-from.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "ignoreUsedVariables": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-flat-map",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-flat-map",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-array-flat-map"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-includes",
            "description": "Prefer `.includes()` over `.indexOf()` and `Array#some()` when checking for existence or non-existence.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-includes.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-json-parse-buffer",
            "description": "Prefer reading a JSON file as a buffer.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-json-parse-buffer.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T22:32:09.999Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-keyboard-event-key",
            "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-keyboard-event-key.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-logical-operator-over-ternary",
            "description": "Prefer using a logical operator over a ternary.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-logical-operator-over-ternary.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-math-trunc",
            "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-math-trunc.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-modern-dom-apis",
            "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-modern-dom-apis.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-modern-math-apis",
            "description": "Prefer modern `Math` APIs over legacy patterns.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-modern-math-apis.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-module",
            "description": "Prefer JavaScript modules (ESM) over CommonJS.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-module.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-native-coercion-functions",
            "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-native-coercion-functions.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-negative-index",
            "description": "Prefer negative index over `.length - index` when possible.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-negative-index.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-node-append",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-node-append",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-dom-node-append"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-node-protocol",
            "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-node-protocol.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T22:36:28.859Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-node-remove",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-node-remove",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-dom-node-remove"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-number-properties",
            "description": "Prefer `Number` static properties over global ones.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-number-properties.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "checkInfinity": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-object-from-entries",
            "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-object-from-entries.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "functions": {
                            "type": "array",
                            "uniqueItems": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-object-has-own",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-object-has-own",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "prefer-object-has-own"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-optional-catch-binding",
            "description": "Prefer omitting the `catch` binding parameter.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-optional-catch-binding.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-prototype-methods",
            "description": "Prefer borrowing methods from the prototype instead of the instance.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-prototype-methods.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-query-selector",
            "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-query-selector.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-reflect-apply",
            "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-reflect-apply.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-regexp-test",
            "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-regexp-test.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-replace-all",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-replace-all",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-string-replace-all"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-set-has",
            "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-set-has.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-set-size",
            "description": "Prefer using `Set#size` instead of `Array#length`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-set-size.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-spread",
            "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-spread.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-starts-ends-with",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-starts-ends-with",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-string-starts-ends-with"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-string-replace-all",
            "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-string-replace-all.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-string-slice",
            "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-string-slice.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-string-starts-ends-with",
            "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-string-starts-ends-with.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-string-trim-start-end",
            "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-string-trim-start-end.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-switch",
            "description": "Prefer `switch` over multiple `else-if`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-switch.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "minimumCases": {
                            "type": "integer",
                            "minimum": 2,
                            "default": 3
                        },
                        "emptyDefaultCase": {
                            "enum": [
                                "no-default-comment",
                                "do-nothing-comment",
                                "no-default-case"
                            ],
                            "default": "no-default-comment"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-ternary",
            "description": "Prefer ternary expressions over simple `if-else` statements.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-ternary.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "only-single-line"
                    ],
                    "default": "always"
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-text-content",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-text-content",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-dom-node-text-content"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-top-level-await",
            "description": "Prefer top-level await over top-level promises and async function calls.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-top-level-await.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-trim-start-end",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#prefer-trim-start-end",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/prefer-string-trim-start-end"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prefer-type-error",
            "description": "Enforce throwing `TypeError` in type checking conditions.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prefer-type-error.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/prevent-abbreviations",
            "description": "Prevent abbreviations.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/prevent-abbreviations.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "type": "array",
                "additionalItems": false,
                "items": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkProperties": {
                                "type": "boolean"
                            },
                            "checkVariables": {
                                "type": "boolean"
                            },
                            "checkDefaultAndNamespaceImports": {
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "pattern": "internal"
                            },
                            "checkShorthandImports": {
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "pattern": "internal"
                            },
                            "checkShorthandProperties": {
                                "type": "boolean"
                            },
                            "checkFilenames": {
                                "type": "boolean"
                            },
                            "extendDefaultReplacements": {
                                "type": "boolean"
                            },
                            "replacements": {
                                "$ref": "#/definitions/abbreviations"
                            },
                            "extendDefaultAllowList": {
                                "type": "boolean"
                            },
                            "allowList": {
                                "$ref": "#/definitions/booleanObject"
                            },
                            "ignore": {
                                "type": "array",
                                "uniqueItems": true
                            }
                        }
                    }
                ],
                "definitions": {
                    "abbreviations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/definitions/replacements"
                        }
                    },
                    "replacements": {
                        "anyOf": [
                            {
                                "enum": [
                                    false
                                ]
                            },
                            {
                                "$ref": "#/definitions/booleanObject"
                            }
                        ]
                    },
                    "booleanObject": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    }
                }
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/regex-shorthand",
            "description": "No rule description provided by the library",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/deprecated-rules.md#regex-shorthand",
            "library": "eslint-plugin-unicorn",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "unicorn/better-regex"
            ],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/relative-url-style",
            "description": "Enforce consistent relative URL style.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/relative-url-style.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "never",
                        "always"
                    ],
                    "default": "never"
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/require-array-join-separator",
            "description": "Enforce using the separator argument with `Array#join()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/require-array-join-separator.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/require-number-to-fixed-digits-argument",
            "description": "Enforce using the digits argument with `Number#toFixed()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/require-number-to-fixed-digits-argument.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/require-post-message-target-origin",
            "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/require-post-message-target-origin.md",
            "library": "eslint-plugin-unicorn",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/string-content",
            "description": "Enforce better string content.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/string-content.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "patterns": {
                            "type": "object",
                            "additionalProperties": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "suggest"
                                        ],
                                        "properties": {
                                            "suggest": {
                                                "type": "string"
                                            },
                                            "fix": {
                                                "type": "boolean"
                                            },
                                            "message": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/switch-case-braces",
            "description": "Enforce consistent brace style for `case` clauses.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/switch-case-braces.md",
            "library": "eslint-plugin-unicorn",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "avoid"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/template-indent",
            "description": "Fix whitespace-insensitive template indentation.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/template-indent.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "indent": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "pattern": "^\\s+$"
                                },
                                {
                                    "type": "integer",
                                    "minimum": 1
                                }
                            ]
                        },
                        "tags": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        },
                        "functions": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        },
                        "selectors": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        },
                        "comments": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/text-encoding-identifier-case",
            "description": "Enforce consistent case for text encoding identifiers.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/text-encoding-identifier-case.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "unicorn/throw-new-error",
            "description": "Require `new` when throwing an error.",
            "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v50.0.1/docs/rules/throw-new-error.md",
            "library": "eslint-plugin-unicorn",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/boolean-prop-naming",
            "description": "Enforces consistent naming for boolean props",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "propTypeNames": {
                            "items": {
                                "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "rule": {
                            "default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                            "minLength": 1,
                            "type": "string"
                        },
                        "message": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "validateNested": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/button-has-type",
            "description": "Disallow usage of `button` elements without an explicit `type` attribute",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "button": {
                            "default": true,
                            "type": "boolean"
                        },
                        "submit": {
                            "default": true,
                            "type": "boolean"
                        },
                        "reset": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/default-props-match-prop-types",
            "description": "Enforce all defaultProps have a corresponding non-required PropType",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowRequiredDefaults": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/destructuring-assignment",
            "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "ignoreClassFields": {
                            "type": "boolean"
                        },
                        "destructureInSignature": {
                            "type": "string",
                            "enum": [
                                "always",
                                "ignore"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/display-name",
            "description": "Disallow missing displayName in a React component definition",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreTranspilerName": {
                            "type": "boolean"
                        },
                        "checkContextObjects": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/forbid-component-props",
            "description": "Disallow certain props on components",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "forbid": {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "propName": {
                                                "type": "string"
                                            },
                                            "allowedFor": {
                                                "type": "array",
                                                "uniqueItems": true,
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "message": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "propName": {
                                                "type": "string"
                                            },
                                            "disallowedFor": {
                                                "type": "array",
                                                "uniqueItems": true,
                                                "minItems": 1,
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "message": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "disallowedFor"
                                        ],
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/forbid-dom-props",
            "description": "Disallow certain props on DOM Nodes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "forbid": {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "propName": {
                                                "type": "string"
                                            },
                                            "disallowedFor": {
                                                "type": "array",
                                                "uniqueItems": true,
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "message": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ],
                                "minLength": 1
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/forbid-elements",
            "description": "Disallow certain elements",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "forbid": {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "element": {
                                                "type": "string"
                                            },
                                            "message": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "element"
                                        ],
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/forbid-foreign-prop-types",
            "description": "Disallow using another component's propTypes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowInPropTypes": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/forbid-prop-types",
            "description": "Disallow certain propTypes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "forbid": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "checkContextTypes": {
                            "type": "boolean"
                        },
                        "checkChildContextTypes": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": true
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/function-component-definition",
            "description": "Enforce a specific function type for function components",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "namedComponents": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "function-declaration",
                                        "arrow-function",
                                        "function-expression"
                                    ]
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "function-declaration",
                                            "arrow-function",
                                            "function-expression"
                                        ]
                                    }
                                }
                            ]
                        },
                        "unnamedComponents": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "arrow-function",
                                        "function-expression"
                                    ]
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "arrow-function",
                                            "function-expression"
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/hook-use-state",
            "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md",
            "library": "eslint-plugin-react",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowDestructuredState": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/iframe-missing-sandbox",
            "description": "Enforce sandbox attribute on iframe elements",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-boolean-value",
            "description": "Enforce boolean attributes notation in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            }
                        ],
                        "additionalItems": false
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "never": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "uniqueItems": true
                                    }
                                }
                            }
                        ],
                        "additionalItems": false
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "enum": [
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "always": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "uniqueItems": true
                                    }
                                }
                            }
                        ],
                        "additionalItems": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-child-element-spacing",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T03:06:22.025Z",
            "note": null
        },
        {
            "name": "react/jsx-closing-bracket-location",
            "description": "Enforce closing bracket location in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "enum": [
                                        "after-props",
                                        "props-aligned",
                                        "tag-aligned",
                                        "line-aligned"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "nonEmpty": {
                                    "enum": [
                                        "after-props",
                                        "props-aligned",
                                        "tag-aligned",
                                        "line-aligned",
                                        false
                                    ]
                                },
                                "selfClosing": {
                                    "enum": [
                                        "after-props",
                                        "props-aligned",
                                        "tag-aligned",
                                        "line-aligned",
                                        false
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-closing-tag-location",
            "description": "Enforce closing tag location for multiline JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-curly-brace-presence",
            "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "props": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "children": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "propElementValues": {
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "enum": [
                                "always",
                                "never",
                                "ignore"
                            ]
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-curly-newline",
            "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md",
            "library": "eslint-plugin-react",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "enum": [
                                "consistent",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleline": {
                                    "enum": [
                                        "consistent",
                                        "require",
                                        "forbid"
                                    ]
                                },
                                "multiline": {
                                    "enum": [
                                        "consistent",
                                        "require",
                                        "forbid"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-curly-spacing",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "definitions": {
                    "basicConfig": {
                        "type": "object",
                        "properties": {
                            "when": {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            "allowMultiline": {
                                "type": "boolean"
                            },
                            "spacing": {
                                "type": "object",
                                "properties": {
                                    "objectLiterals": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "basicConfigOrBoolean": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/basicConfig"
                            },
                            {
                                "type": "boolean"
                            }
                        ]
                    }
                },
                "type": "array",
                "items": [
                    {
                        "anyOf": [
                            {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/basicConfig"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "attributes": {
                                                "$ref": "#/definitions/basicConfigOrBoolean"
                                            },
                                            "children": {
                                                "$ref": "#/definitions/basicConfigOrBoolean"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowMultiline": {
                                "type": "boolean"
                            },
                            "spacing": {
                                "type": "object",
                                "properties": {
                                    "objectLiterals": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    }
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-equals-spacing",
            "description": "Enforce or disallow spaces around equal signs in JSX attributes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-filename-extension",
            "description": "Disallow file extensions that may contain JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "enum": [
                                "always",
                                "as-needed"
                            ]
                        },
                        "extensions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-first-prop-new-line",
            "description": "Enforce proper position of the first property in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never",
                        "multiline",
                        "multiline-multiprop",
                        "multiprop"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-fragments",
            "description": "Enforce shorthand or standard form for React fragments",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "syntax",
                        "element"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-handler-names",
            "description": "Enforce event handler naming conventions in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "eventHandlerPrefix": {
                                    "type": "string"
                                },
                                "eventHandlerPropPrefix": {
                                    "type": "string"
                                },
                                "checkLocalVariables": {
                                    "type": "boolean"
                                },
                                "checkInlineFunction": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "eventHandlerPrefix": {
                                    "type": "string"
                                },
                                "eventHandlerPropPrefix": {
                                    "type": "boolean",
                                    "enum": [
                                        false
                                    ]
                                },
                                "checkLocalVariables": {
                                    "type": "boolean"
                                },
                                "checkInlineFunction": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "eventHandlerPrefix": {
                                    "type": "boolean",
                                    "enum": [
                                        false
                                    ]
                                },
                                "eventHandlerPropPrefix": {
                                    "type": "string"
                                },
                                "checkLocalVariables": {
                                    "type": "boolean"
                                },
                                "checkInlineFunction": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "checkLocalVariables": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "checkInlineFunction": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-indent",
            "description": "Enforce JSX indentation",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "enum": [
                                "tab"
                            ]
                        },
                        {
                            "type": "integer"
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "checkAttributes": {
                            "type": "boolean"
                        },
                        "indentLogicalExpressions": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-indent-props",
            "description": "Enforce props indentation in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "enum": [
                                "tab",
                                "first"
                            ]
                        },
                        {
                            "type": "integer"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "indentMode": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "tab",
                                                "first"
                                            ]
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ]
                                },
                                "ignoreTernaryOperator": {
                                    "type": "boolean"
                                }
                            }
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-key",
            "description": "Disallow missing `key` props in iterators/collection literals",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "checkFragmentShorthand": {
                            "type": "boolean",
                            "default": false
                        },
                        "checkKeyMustBeforeSpread": {
                            "type": "boolean",
                            "default": false
                        },
                        "warnOnDuplicates": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "warnOnDuplicates": true
                }
            ],
            "updatedAt": "2024-01-17T03:23:26.048Z",
            "note": null
        },
        {
            "name": "react/jsx-max-depth",
            "description": "Enforce JSX maximum depth",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-max-props-per-line",
            "description": "Enforce maximum of props on a single line in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "object",
                                    "properties": {
                                        "single": {
                                            "type": "integer",
                                            "minimum": 1
                                        },
                                        "multi": {
                                            "type": "integer",
                                            "minimum": 1
                                        }
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "number",
                                    "minimum": 1
                                },
                                "when": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "multiline"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-newline",
            "description": "Require or prevent a new line after jsx elements and expressions.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "prevent": {
                            "default": false,
                            "type": "boolean"
                        },
                        "allowMultilines": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false,
                    "if": {
                        "properties": {
                            "allowMultilines": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "prevent": {
                                "const": true
                            }
                        },
                        "required": [
                            "prevent"
                        ]
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-bind",
            "description": "Disallow `.bind()` or arrow functions in JSX props",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowArrowFunctions": {
                            "default": false,
                            "type": "boolean"
                        },
                        "allowBind": {
                            "default": false,
                            "type": "boolean"
                        },
                        "allowFunctions": {
                            "default": false,
                            "type": "boolean"
                        },
                        "ignoreRefs": {
                            "default": false,
                            "type": "boolean"
                        },
                        "ignoreDOMComponents": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-comment-textnodes",
            "description": "Disallow comments from being inserted as text nodes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-constructed-context-values",
            "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {},
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-duplicate-props",
            "description": "Disallow duplicate properties in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreCase": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-leaked-render",
            "description": "Disallow problematic leaked values from being rendered",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "validStrategies": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "ternary",
                                    "coerce"
                                ]
                            },
                            "uniqueItems": true,
                            "default": [
                                "ternary",
                                "coerce"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T03:29:02.869Z",
            "note": null
        },
        {
            "name": "react/jsx-no-literals",
            "description": "Disallow usage of string literals in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "noStrings": {
                            "type": "boolean"
                        },
                        "allowedStrings": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        },
                        "ignoreProps": {
                            "type": "boolean"
                        },
                        "noAttributeStrings": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-script-url",
            "description": "Disallow usage of `javascript:` URLs",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "props": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                }
                            }
                        },
                        "required": [
                            "name",
                            "props"
                        ],
                        "additionalProperties": false
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-target-blank",
            "description": "Disallow `target=\"_blank\"` attribute without `rel=\"noreferrer\"`",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowReferrer": {
                            "type": "boolean"
                        },
                        "enforceDynamicLinks": {
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        "warnOnSpreadAttributes": {
                            "type": "boolean"
                        },
                        "links": {
                            "type": "boolean",
                            "default": true
                        },
                        "forms": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-undef",
            "description": "Disallow undeclared variables in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowGlobals": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-no-useless-fragment",
            "description": "Disallow unnecessary fragments",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md",
            "library": "eslint-plugin-react",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowExpressions": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-one-expression-per-line",
            "description": "Require one JSX element per line",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "enum": [
                                "none",
                                "literal",
                                "single-child"
                            ]
                        }
                    },
                    "default": {
                        "allow": "none"
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-pascal-case",
            "description": "Enforce PascalCase for user-defined JSX components",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowAllCaps": {
                            "type": "boolean"
                        },
                        "allowLeadingUnderscore": {
                            "type": "boolean"
                        },
                        "allowNamespace": {
                            "type": "boolean"
                        },
                        "ignore": {
                            "items": [
                                {
                                    "type": "string"
                                }
                            ],
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-props-no-multi-spaces",
            "description": "Disallow multiple spaces between inline JSX props",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-props-no-spreading",
            "description": "Disallow JSX prop spreading",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "html": {
                                    "enum": [
                                        "enforce",
                                        "ignore"
                                    ]
                                },
                                "custom": {
                                    "enum": [
                                        "enforce",
                                        "ignore"
                                    ]
                                },
                                "exceptions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    }
                                }
                            }
                        },
                        {
                            "not": {
                                "type": "object",
                                "required": [
                                    "html",
                                    "custom"
                                ],
                                "properties": {
                                    "html": {
                                        "enum": [
                                            "ignore"
                                        ]
                                    },
                                    "custom": {
                                        "enum": [
                                            "ignore"
                                        ]
                                    },
                                    "exceptions": {
                                        "type": "array",
                                        "minItems": 0,
                                        "maxItems": 0
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-sort-default-props",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "sort-default-props"
            ],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreCase": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-sort-props",
            "description": "Enforce props alphabetical sorting",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "callbacksLast": {
                            "type": "boolean"
                        },
                        "shorthandFirst": {
                            "type": "boolean"
                        },
                        "shorthandLast": {
                            "type": "boolean"
                        },
                        "multiline": {
                            "enum": [
                                "ignore",
                                "first",
                                "last"
                            ],
                            "default": "ignore"
                        },
                        "ignoreCase": {
                            "type": "boolean"
                        },
                        "noSortAlphabetically": {
                            "type": "boolean"
                        },
                        "reservedFirst": {
                            "type": [
                                "array",
                                "boolean"
                            ]
                        },
                        "locale": {
                            "type": "string",
                            "default": "auto"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-space-before-closing",
            "description": "Enforce spacing before closing bracket in JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": true,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [
                "jsx-tag-spacing"
            ],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-tag-spacing",
            "description": "Enforce whitespace in and around the JSX opening and closing brackets",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "closingSlash": {
                            "enum": [
                                "always",
                                "never",
                                "allow"
                            ]
                        },
                        "beforeSelfClosing": {
                            "enum": [
                                "always",
                                "proportional-always",
                                "never",
                                "allow"
                            ]
                        },
                        "afterOpening": {
                            "enum": [
                                "always",
                                "allow-multiline",
                                "never",
                                "allow"
                            ]
                        },
                        "beforeClosing": {
                            "enum": [
                                "always",
                                "proportional-always",
                                "never",
                                "allow"
                            ]
                        }
                    },
                    "default": {
                        "closingSlash": "never",
                        "beforeSelfClosing": "always",
                        "afterOpening": "never",
                        "beforeClosing": "allow"
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-uses-react",
            "description": "Disallow React to be incorrectly marked as unused",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-uses-vars",
            "description": "Disallow variables used in JSX to be incorrectly marked as unused",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/jsx-wrap-multilines",
            "description": "Disallow missing parentheses around multiline JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "declaration": {
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "assignment": {
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "return": {
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "arrow": {
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "condition": {
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "logical": {
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "prop": {
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-access-state-in-setstate",
            "description": "Disallow when this.state is accessed within setState",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-adjacent-inline-elements",
            "description": "Disallow adjacent inline elements not separated by whitespace.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-array-index-key",
            "description": "Disallow usage of Array index in keys",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-arrow-function-lifecycle",
            "description": "Lifecycle methods should be methods on the prototype, not class fields",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-children-prop",
            "description": "Disallow passing of children as props",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowFunctions": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-danger",
            "description": "Disallow usage of dangerous JSX properties",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-danger-with-children",
            "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-deprecated",
            "description": "Disallow usage of deprecated methods",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T03:41:04.960Z",
            "note": null
        },
        {
            "name": "react/no-did-mount-set-state",
            "description": "Disallow usage of setState in componentDidMount",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "disallow-in-func"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-did-update-set-state",
            "description": "Disallow usage of setState in componentDidUpdate",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "disallow-in-func"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-direct-mutation-state",
            "description": "Disallow direct mutation of this.state",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-find-dom-node",
            "description": "Disallow usage of findDOMNode",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-invalid-html-attribute",
            "description": "Disallow usage of invalid attributes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md",
            "library": "eslint-plugin-react",
            "type": "suggestion",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "enum": [
                            "rel"
                        ]
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-is-mounted",
            "description": "Disallow usage of isMounted",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-multi-comp",
            "description": "Disallow multiple component definition per file",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreStateless": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-namespace",
            "description": "Enforce that namespaces are not used in React elements",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-object-type-as-default-prop",
            "description": "Disallow usage of referential-type variables as default param in functional component",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-redundant-should-component-update",
            "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-render-return-value",
            "description": "Disallow usage of the return value of ReactDOM.render",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-set-state",
            "description": "Disallow usage of setState",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-string-refs",
            "description": "Disallow using string references",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "noTemplateLiterals": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-this-in-sfc",
            "description": "Disallow `this` from being used in stateless functional components",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-typos",
            "description": "Disallow common typos",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-unescaped-entities",
            "description": "Disallow unescaped HTML entities from appearing in markup",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "forbid": {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "char": {
                                                "type": "string"
                                            },
                                            "alternatives": {
                                                "type": "array",
                                                "uniqueItems": true,
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-unknown-property",
            "description": "Disallow usage of unknown DOM property",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignore": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-unsafe",
            "description": "Disallow usage of unsafe lifecycle methods",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "checkAliases": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-unstable-nested-components",
            "description": "Disallow creating unstable components inside components",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "customValidators": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "allowAsProps": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-unused-class-component-methods",
            "description": "Disallow declaring unused methods of component class",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-unused-prop-types",
            "description": "Disallow definitions of unused propTypes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignore": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        },
                        "customValidators": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "skipShapeProps": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-unused-state",
            "description": "Disallow definitions of unused state",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/no-will-update-set-state",
            "description": "Disallow usage of setState in componentWillUpdate",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "disallow-in-func"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/prefer-es6-class",
            "description": "Enforce ES5 or ES6 class for React Components",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/prefer-exact-props",
            "description": "Prefer exact proptype definitions",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/prefer-read-only-props",
            "description": "Enforce that props are read-only",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/prefer-stateless-function",
            "description": "Enforce stateless components to be written as a pure function",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignorePureComponents": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/prop-types",
            "description": "Disallow missing props validation in a React component definition",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignore": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "customValidators": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "skipUndeclared": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/react-in-jsx-scope",
            "description": "Disallow missing React when using JSX",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/require-default-props",
            "description": "Enforce a defaultProps definition for every prop that is not a required prop",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "forbidDefaultForRequired": {
                            "type": "boolean"
                        },
                        "classes": {
                            "enum": [
                                "defaultProps",
                                "ignore"
                            ]
                        },
                        "functions": {
                            "enum": [
                                "defaultArguments",
                                "defaultProps",
                                "ignore"
                            ]
                        },
                        "ignoreFunctionalComponents": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/require-optimization",
            "description": "Enforce React components to have a shouldComponentUpdate method",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowDecorators": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/require-render-return",
            "description": "Enforce ES5 or ES6 class for returning value in render function",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/self-closing-comp",
            "description": "Disallow extra closing tags for components without children",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "component": {
                            "default": true,
                            "type": "boolean"
                        },
                        "html": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "component": true,
                    "html": false
                }
            ],
            "updatedAt": "2024-01-17T03:55:49.485Z",
            "note": null
        },
        {
            "name": "react/sort-comp",
            "description": "Enforce component methods order",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "order": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "groups": {
                            "type": "object",
                            "patternProperties": {
                                "^.*$": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/sort-default-props",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreCase": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/sort-prop-types",
            "description": "Enforce propTypes declarations alphabetical sorting",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "requiredFirst": {
                            "type": "boolean"
                        },
                        "callbacksLast": {
                            "type": "boolean"
                        },
                        "ignoreCase": {
                            "type": "boolean"
                        },
                        "noSortAlphabetically": {
                            "type": "boolean"
                        },
                        "sortShapeProp": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/state-in-constructor",
            "description": "Enforce class component state initialization style",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/static-property-placement",
            "description": "Enforces where React component static properties should be positioned.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "enum": [
                        "static public field",
                        "static getter",
                        "property assignment"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "propTypes": {
                            "enum": [
                                "static public field",
                                "static getter",
                                "property assignment"
                            ]
                        },
                        "defaultProps": {
                            "enum": [
                                "static public field",
                                "static getter",
                                "property assignment"
                            ]
                        },
                        "childContextTypes": {
                            "enum": [
                                "static public field",
                                "static getter",
                                "property assignment"
                            ]
                        },
                        "contextTypes": {
                            "enum": [
                                "static public field",
                                "static getter",
                                "property assignment"
                            ]
                        },
                        "contextType": {
                            "enum": [
                                "static public field",
                                "static getter",
                                "property assignment"
                            ]
                        },
                        "displayName": {
                            "enum": [
                                "static public field",
                                "static getter",
                                "property assignment"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/style-prop-object",
            "description": "Enforce style prop value is an object",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "additionalItems": false,
                            "uniqueItems": true
                        }
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "react/void-dom-elements-no-children",
            "description": "Disallow void DOM elements (e.g. `<img />`, `<br />`) from receiving children",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md",
            "library": "eslint-plugin-react",
            "type": null,
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-17T03:57:40.856Z",
            "note": null
        },
        {
            "name": "react-hooks/exhaustive-deps",
            "description": "verifies the list of dependencies for Hooks like useEffect and similar",
            "url": "https://github.com/facebook/react/issues/14920",
            "library": "eslint-plugin-react-hooks",
            "type": "suggestion",
            "fixable": "code",
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": true,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "additionalProperties": false,
                    "enableDangerousAutofixThisMayCauseInfiniteLoops": false,
                    "properties": {
                        "additionalHooks": {
                            "type": "string"
                        },
                        "enableDangerousAutofixThisMayCauseInfiniteLoops": {
                            "type": "boolean"
                        }
                    }
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-20T05:01:01.712Z",
            "note": null
        },
        {
            "name": "react-hooks/rules-of-hooks",
            "description": "enforces the Rules of Hooks",
            "url": "https://reactjs.org/docs/hooks-rules.html",
            "library": "eslint-plugin-react-hooks",
            "type": "problem",
            "fixable": null,
            "deprecated": false,
            "recommended": true,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 2,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-20T05:01:13.593Z",
            "note": null
        },
        {
            "name": "@stylistic/array-bracket-newline",
            "description": "Enforce linebreaks after opening and before closing array brackets",
            "url": "https://eslint.style/rules/js/array-bracket-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never",
                                "consistent"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "multiline": {
                                    "type": "boolean"
                                },
                                "minItems": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/array-bracket-spacing",
            "description": "Enforce consistent spacing inside array brackets",
            "url": "https://eslint.style/rules/js/array-bracket-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "singleValue": {
                            "type": "boolean"
                        },
                        "objectsInArrays": {
                            "type": "boolean"
                        },
                        "arraysInArrays": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/array-element-newline",
            "description": "Enforce line breaks after each array element",
            "url": "https://eslint.style/rules/js/array-element-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "definitions": {
                    "basicConfig": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "always",
                                    "never",
                                    "consistent"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "multiline": {
                                        "type": "boolean"
                                    },
                                    "minItems": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                },
                "type": "array",
                "items": [
                    {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/basicConfig"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ArrayExpression": {
                                        "$ref": "#/definitions/basicConfig"
                                    },
                                    "ArrayPattern": {
                                        "$ref": "#/definitions/basicConfig"
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    }
                ]
            },
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "consistent"
            ],
            "updatedAt": "2024-01-18T17:50:37.036Z",
            "note": null
        },
        {
            "name": "@stylistic/arrow-parens",
            "description": "Require parentheses around arrow function arguments",
            "url": "https://eslint.style/rules/js/arrow-parens",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "as-needed"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "requireForBlockBody": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/arrow-spacing",
            "description": "Enforce consistent spacing before and after the arrow in arrow functions",
            "url": "https://eslint.style/rules/js/arrow-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": true
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/block-spacing",
            "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
            "url": "https://eslint.style/rules/ts/block-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/brace-style",
            "description": "Enforce consistent brace style for blocks",
            "url": "https://eslint.style/rules/ts/brace-style",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "1tbs",
                        "stroustrup",
                        "allman"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "allowSingleLine": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "stroustrup",
                {
                    "allowSingleLine": true
                }
            ],
            "updatedAt": "2024-01-17T23:31:00.870Z",
            "note": null
        },
        {
            "name": "@stylistic/comma-dangle",
            "description": "Require or disallow trailing commas",
            "url": "https://eslint.style/rules/ts/comma-dangle",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "$defs": {
                    "value": {
                        "type": "string",
                        "enum": [
                            "always-multiline",
                            "always",
                            "never",
                            "only-multiline"
                        ]
                    },
                    "valueWithIgnore": {
                        "type": "string",
                        "enum": [
                            "always-multiline",
                            "always",
                            "never",
                            "only-multiline",
                            "ignore"
                        ]
                    }
                },
                "type": "array",
                "items": [
                    {
                        "oneOf": [
                            {
                                "$ref": "#/$defs/value"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "arrays": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "objects": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "imports": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "exports": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "functions": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "enums": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "generics": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    },
                                    "tuples": {
                                        "$ref": "#/$defs/valueWithIgnore"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "additionalItems": false
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-18T03:17:41.581Z",
            "note": null
        },
        {
            "name": "@stylistic/comma-spacing",
            "description": "Enforce consistent spacing before and after commas",
            "url": "https://eslint.style/rules/ts/comma-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": false
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/comma-style",
            "description": "Enforce consistent comma style",
            "url": "https://eslint.style/rules/js/comma-style",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "first",
                        "last"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/computed-property-spacing",
            "description": "Enforce consistent spacing inside computed property brackets",
            "url": "https://eslint.style/rules/js/computed-property-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "enforceForClassMembers": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/dot-location",
            "description": "Enforce consistent newlines before and after dots",
            "url": "https://eslint.style/rules/js/dot-location",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "object",
                        "property"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/eol-last",
            "description": "Require or disallow newline at the end of files",
            "url": "https://eslint.style/rules/js/eol-last",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "unix",
                        "windows"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/func-call-spacing",
            "description": "Require or disallow spacing between function identifiers and their invocations",
            "url": "https://eslint.style/rules/ts/function-call-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "never"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "allowNewlines": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/function-call-argument-newline",
            "description": "Enforce line breaks between arguments of a function call",
            "url": "https://eslint.style/rules/js/function-call-argument-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "consistent"
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "consistent"
            ],
            "updatedAt": "2024-01-18T03:23:47.098Z",
            "note": null
        },
        {
            "name": "@stylistic/function-call-spacing",
            "description": "Require or disallow spacing between function identifiers and their invocations",
            "url": "https://eslint.style/rules/ts/function-call-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "never"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "allowNewlines": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/function-paren-newline",
            "description": "Enforce consistent line breaks inside function parentheses",
            "url": "https://eslint.style/rules/js/function-paren-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never",
                                "consistent",
                                "multiline",
                                "multiline-arguments"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "minItems": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "consistent"
            ],
            "updatedAt": "2024-01-18T03:26:28.355Z",
            "note": null
        },
        {
            "name": "@stylistic/generator-star-spacing",
            "description": "Enforce consistent spacing around `*` operators in generator functions",
            "url": "https://eslint.style/rules/js/generator-star-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "before",
                                "after",
                                "both",
                                "neither"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "before": {
                                    "type": "boolean"
                                },
                                "after": {
                                    "type": "boolean"
                                },
                                "named": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "before",
                                                "after",
                                                "both",
                                                "neither"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "before": {
                                                    "type": "boolean"
                                                },
                                                "after": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "anonymous": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "before",
                                                "after",
                                                "both",
                                                "neither"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "before": {
                                                    "type": "boolean"
                                                },
                                                "after": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "method": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "before",
                                                "after",
                                                "both",
                                                "neither"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "before": {
                                                    "type": "boolean"
                                                },
                                                "after": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/implicit-arrow-linebreak",
            "description": "Enforce the location of arrow function bodies",
            "url": "https://eslint.style/rules/js/implicit-arrow-linebreak",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "beside",
                        "below"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/indent",
            "description": "Enforce consistent indentation",
            "url": "https://eslint.style/rules/ts/indent",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "tab"
                            ]
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "SwitchCase": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        },
                        "VariableDeclarator": {
                            "oneOf": [
                                {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "type": "string",
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "var": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "type": "string",
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        },
                                        "let": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "type": "string",
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        },
                                        "const": {
                                            "oneOf": [
                                                {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                {
                                                    "type": "string",
                                                    "enum": [
                                                        "first",
                                                        "off"
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        "outerIIFEBody": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "MemberExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "FunctionDeclaration": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "type": "string",
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "FunctionExpression": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "type": "string",
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                },
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "StaticBlock": {
                            "type": "object",
                            "properties": {
                                "body": {
                                    "type": "integer",
                                    "minimum": 0
                                }
                            },
                            "additionalProperties": false
                        },
                        "CallExpression": {
                            "type": "object",
                            "properties": {
                                "arguments": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        {
                                            "type": "string",
                                            "enum": [
                                                "first",
                                                "off"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        "ArrayExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "ObjectExpression": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "ImportDeclaration": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "first",
                                        "off"
                                    ]
                                }
                            ]
                        },
                        "flatTernaryExpressions": {
                            "type": "boolean",
                            "default": false
                        },
                        "offsetTernaryExpressions": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoredNodes": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "not": {
                                    "pattern": ":exit$"
                                }
                            }
                        },
                        "ignoreComments": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/indent-binary-ops",
            "description": "Indentation for binary operators",
            "url": "https://eslint.style/rules/plus/indent-binary-ops",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0
                        },
                        {
                            "type": "string",
                            "enum": [
                                "tab"
                            ]
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-child-element-spacing",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "url": "https://eslint.style/rules/jsx/jsx-child-element-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-closing-bracket-location",
            "description": "Enforce closing bracket location in JSX",
            "url": "https://eslint.style/rules/jsx/jsx-closing-bracket-location",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "enum": [
                                        "after-props",
                                        "props-aligned",
                                        "tag-aligned",
                                        "line-aligned"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "nonEmpty": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "after-props",
                                                "props-aligned",
                                                "tag-aligned",
                                                "line-aligned"
                                            ]
                                        },
                                        {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ]
                                        }
                                    ]
                                },
                                "selfClosing": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "after-props",
                                                "props-aligned",
                                                "tag-aligned",
                                                "line-aligned"
                                            ]
                                        },
                                        {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ]
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-closing-tag-location",
            "description": "Enforce closing tag location for multiline JSX",
            "url": "https://eslint.style/rules/jsx/jsx-closing-tag-location",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-24T12:41:24.929Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-curly-brace-presence",
            "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
            "url": "https://eslint.style/rules/jsx/jsx-curly-brace-presence",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "props": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "children": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "propElementValues": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never",
                                "ignore"
                            ]
                        }
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "props": "never",
                    "children": "never",
                    "propElementValues": "always"
                }
            ],
            "updatedAt": "2024-01-18T21:16:57.461Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-curly-newline",
            "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
            "url": "https://eslint.style/rules/jsx/jsx-curly-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "consistent",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleline": {
                                    "type": "string",
                                    "enum": [
                                        "consistent",
                                        "require",
                                        "forbid"
                                    ]
                                },
                                "multiline": {
                                    "type": "string",
                                    "enum": [
                                        "consistent",
                                        "require",
                                        "forbid"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "consistent"
            ],
            "updatedAt": "2024-01-18T03:49:31.841Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-curly-spacing",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "url": "https://eslint.style/rules/jsx/jsx-curly-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "definitions": {
                    "basicConfig": {
                        "type": "object",
                        "properties": {
                            "when": {
                                "type": "string",
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            "allowMultiline": {
                                "type": "boolean"
                            },
                            "spacing": {
                                "type": "object",
                                "properties": {
                                    "objectLiterals": {
                                        "type": "string",
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "basicConfigOrBoolean": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/basicConfig"
                            },
                            {
                                "type": "boolean"
                            }
                        ]
                    }
                },
                "type": "array",
                "items": [
                    {
                        "anyOf": [
                            {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/basicConfig"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "attributes": {
                                                "$ref": "#/definitions/basicConfigOrBoolean"
                                            },
                                            "children": {
                                                "$ref": "#/definitions/basicConfigOrBoolean"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowMultiline": {
                                "type": "boolean"
                            },
                            "spacing": {
                                "type": "object",
                                "properties": {
                                    "objectLiterals": {
                                        "type": "string",
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    }
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-equals-spacing",
            "description": "Enforce or disallow spaces around equal signs in JSX attributes",
            "url": "https://eslint.style/rules/jsx/jsx-equals-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-first-prop-new-line",
            "description": "Enforce proper position of the first property in JSX",
            "url": "https://eslint.style/rules/jsx/jsx-first-prop-new-line",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "multiline",
                        "multiline-multiprop",
                        "multiprop"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-18T15:51:34.305Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-indent",
            "description": "Enforce JSX indentation",
            "url": "https://eslint.style/rules/jsx/jsx-indent",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "tab"
                            ]
                        },
                        {
                            "type": "integer"
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "checkAttributes": {
                            "type": "boolean"
                        },
                        "indentLogicalExpressions": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-indent-props",
            "description": "Enforce props indentation in JSX",
            "url": "https://eslint.style/rules/jsx/jsx-indent-props",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "tab",
                                "first"
                            ]
                        },
                        {
                            "type": "integer"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "indentMode": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "tab",
                                                "first"
                                            ]
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ]
                                },
                                "ignoreTernaryOperator": {
                                    "type": "boolean"
                                }
                            }
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-max-props-per-line",
            "description": "Enforce maximum of props on a single line in JSX",
            "url": "https://eslint.style/rules/jsx/jsx-max-props-per-line",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "object",
                                    "properties": {
                                        "single": {
                                            "type": "integer",
                                            "minimum": 1
                                        },
                                        "multi": {
                                            "type": "integer",
                                            "minimum": 1
                                        }
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "maximum": {
                                    "type": "number",
                                    "minimum": 1
                                },
                                "when": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "multiline"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-newline",
            "description": "Require or prevent a new line after jsx elements and expressions.",
            "url": "https://eslint.style/rules/jsx/jsx-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "prevent": {
                            "default": false,
                            "type": "boolean"
                        },
                        "allowMultilines": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false,
                    "if": {
                        "properties": {
                            "allowMultilines": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "prevent": {
                                "const": true
                            }
                        },
                        "required": [
                            "prevent"
                        ]
                    }
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-one-expression-per-line",
            "description": "Require one JSX element per line",
            "url": "https://eslint.style/rules/jsx/jsx-one-expression-per-line",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allow": {
                            "type": "string",
                            "enum": [
                                "none",
                                "literal",
                                "single-child"
                            ]
                        }
                    },
                    "default": {
                        "allow": "none"
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [
                {
                    "allow": "single-child"
                }
            ],
            "updatedAt": "2024-01-23T07:02:44.459Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-props-no-multi-spaces",
            "description": "Disallow multiple spaces between inline JSX props",
            "url": "https://eslint.style/rules/jsx/jsx-props-no-multi-spaces",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-quotes",
            "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
            "url": "https://eslint.style/rules/js/jsx-quotes",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "prefer-single",
                        "prefer-double"
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "prefer-single"
            ],
            "updatedAt": "2024-01-18T15:56:56.212Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-self-closing-comp",
            "description": "Disallow extra closing tags for components without children",
            "url": "https://eslint.style/rules/jsx/jsx-self-closing-comp",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "component": {
                            "default": true,
                            "type": "boolean"
                        },
                        "html": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "component": true,
                    "html": false
                }
            ],
            "updatedAt": "2024-01-18T15:57:39.387Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-sort-props",
            "description": "Enforce props alphabetical sorting",
            "url": "https://eslint.style/rules/jsx/jsx-sort-props",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "callbacksLast": {
                            "type": "boolean"
                        },
                        "shorthandFirst": {
                            "type": "boolean"
                        },
                        "shorthandLast": {
                            "type": "boolean"
                        },
                        "multiline": {
                            "type": "string",
                            "enum": [
                                "ignore",
                                "first",
                                "last"
                            ],
                            "default": "ignore"
                        },
                        "ignoreCase": {
                            "type": "boolean"
                        },
                        "noSortAlphabetically": {
                            "type": "boolean"
                        },
                        "reservedFirst": {
                            "type": [
                                "array",
                                "boolean"
                            ]
                        },
                        "locale": {
                            "type": "string",
                            "default": "auto"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "callbacksLast": true,
                    "shorthandLast": true,
                    "reservedFirst": true
                }
            ],
            "updatedAt": "2024-01-18T16:01:34.432Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-tag-spacing",
            "description": "Enforce whitespace in and around the JSX opening and closing brackets",
            "url": "https://eslint.style/rules/jsx/jsx-tag-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "closingSlash": {
                            "type": "string",
                            "enum": [
                                "always",
                                "never",
                                "allow"
                            ]
                        },
                        "beforeSelfClosing": {
                            "type": "string",
                            "enum": [
                                "always",
                                "proportional-always",
                                "never",
                                "allow"
                            ]
                        },
                        "afterOpening": {
                            "type": "string",
                            "enum": [
                                "always",
                                "allow-multiline",
                                "never",
                                "allow"
                            ]
                        },
                        "beforeClosing": {
                            "type": "string",
                            "enum": [
                                "always",
                                "proportional-always",
                                "never",
                                "allow"
                            ]
                        }
                    },
                    "default": {
                        "closingSlash": "never",
                        "beforeSelfClosing": "always",
                        "afterOpening": "never",
                        "beforeClosing": "allow"
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "closingSlash": "never",
                    "beforeSelfClosing": "always",
                    "afterOpening": "never",
                    "beforeClosing": "never"
                }
            ],
            "updatedAt": "2024-01-18T16:13:23.987Z",
            "note": null
        },
        {
            "name": "@stylistic/jsx-wrap-multilines",
            "description": "Disallow missing parentheses around multiline JSX",
            "url": "https://eslint.style/rules/jsx/jsx-wrap-multilines",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "declaration": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "assignment": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "return": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "arrow": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "condition": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "logical": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        },
                        "prop": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                true,
                                false,
                                "ignore",
                                "parens",
                                "parens-new-line"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "declaration": "ignore",
                    "assignment": "ignore",
                    "return": "parens-new-line",
                    "arrow": "parens-new-line",
                    "condition": "ignore",
                    "logical": "ignore",
                    "prop": "ignore"
                }
            ],
            "updatedAt": "2024-01-18T16:18:56.112Z",
            "note": null
        },
        {
            "name": "@stylistic/key-spacing",
            "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
            "url": "https://eslint.style/rules/ts/key-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "align": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "colon",
                                                "value"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "mode": {
                                                    "type": "string",
                                                    "enum": [
                                                        "strict",
                                                        "minimum"
                                                    ]
                                                },
                                                "on": {
                                                    "type": "string",
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ]
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "afterColon": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "mode": {
                                    "type": "string",
                                    "enum": [
                                        "strict",
                                        "minimum"
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "afterColon": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "type": "string",
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "multiLine": {
                                    "type": "object",
                                    "properties": {
                                        "align": {
                                            "anyOf": [
                                                {
                                                    "type": "string",
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ]
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "mode": {
                                                            "type": "string",
                                                            "enum": [
                                                                "strict",
                                                                "minimum"
                                                            ]
                                                        },
                                                        "on": {
                                                            "type": "string",
                                                            "enum": [
                                                                "colon",
                                                                "value"
                                                            ]
                                                        },
                                                        "beforeColon": {
                                                            "type": "boolean"
                                                        },
                                                        "afterColon": {
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        },
                                        "mode": {
                                            "type": "string",
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "properties": {
                                "singleLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "type": "string",
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "multiLine": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "type": "string",
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "align": {
                                    "type": "object",
                                    "properties": {
                                        "mode": {
                                            "type": "string",
                                            "enum": [
                                                "strict",
                                                "minimum"
                                            ]
                                        },
                                        "on": {
                                            "type": "string",
                                            "enum": [
                                                "colon",
                                                "value"
                                            ]
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "afterColon": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/keyword-spacing",
            "description": "Enforce consistent spacing before and after keywords",
            "url": "https://eslint.style/rules/ts/keyword-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": true
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "abstract": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "as": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "async": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "await": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "boolean": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "break": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "byte": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "case": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "catch": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "char": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "class": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "const": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "continue": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "debugger": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "default": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "delete": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "do": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "double": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "else": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "enum": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "export": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "extends": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "false": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "final": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "finally": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "float": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "for": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "from": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "function": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "get": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "goto": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "if": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "implements": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "import": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "in": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "instanceof": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "int": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "interface": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "let": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "long": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "native": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "new": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "null": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "of": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "package": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "private": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "protected": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "public": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "return": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "set": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "short": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "static": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "super": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "switch": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "synchronized": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "this": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "throw": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "throws": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "transient": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "true": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "try": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "typeof": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "var": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "void": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "volatile": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "while": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "with": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "yield": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "type": {
                                    "type": "object",
                                    "properties": {
                                        "before": {
                                            "type": "boolean"
                                        },
                                        "after": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/linebreak-style",
            "description": "Enforce consistent linebreak style",
            "url": "https://eslint.style/rules/js/linebreak-style",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "unix",
                        "windows"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/lines-around-comment",
            "description": "Require empty lines around comments",
            "url": "https://eslint.style/rules/ts/lines-around-comment",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "beforeBlockComment": {
                            "type": "boolean",
                            "default": true
                        },
                        "afterBlockComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "beforeLineComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "afterLineComment": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowBlockStart": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowBlockEnd": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowClassStart": {
                            "type": "boolean"
                        },
                        "allowClassEnd": {
                            "type": "boolean"
                        },
                        "allowObjectStart": {
                            "type": "boolean"
                        },
                        "allowObjectEnd": {
                            "type": "boolean"
                        },
                        "allowArrayStart": {
                            "type": "boolean"
                        },
                        "allowArrayEnd": {
                            "type": "boolean"
                        },
                        "allowInterfaceStart": {
                            "type": "boolean"
                        },
                        "allowInterfaceEnd": {
                            "type": "boolean"
                        },
                        "allowTypeStart": {
                            "type": "boolean"
                        },
                        "allowTypeEnd": {
                            "type": "boolean"
                        },
                        "allowEnumStart": {
                            "type": "boolean"
                        },
                        "allowEnumEnd": {
                            "type": "boolean"
                        },
                        "allowModuleStart": {
                            "type": "boolean"
                        },
                        "allowModuleEnd": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "applyDefaultIgnorePatterns": {
                            "type": "boolean"
                        },
                        "afterHashbangComment": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/lines-between-class-members",
            "description": "Require or disallow an empty line between class members",
            "url": "https://eslint.style/rules/ts/lines-between-class-members",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "enforce": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "blankLine": {
                                                "type": "string",
                                                "enum": [
                                                    "always",
                                                    "never"
                                                ]
                                            },
                                            "prev": {
                                                "type": "string",
                                                "enum": [
                                                    "method",
                                                    "field",
                                                    "*"
                                                ]
                                            },
                                            "next": {
                                                "type": "string",
                                                "enum": [
                                                    "method",
                                                    "field",
                                                    "*"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "blankLine",
                                            "prev",
                                            "next"
                                        ]
                                    },
                                    "minItems": 1
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "enforce"
                            ]
                        },
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptAfterSingleLine": {
                            "type": "boolean",
                            "default": false
                        },
                        "exceptAfterOverload": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/max-len",
            "description": "Enforce a maximum line length",
            "url": "https://eslint.style/rules/js/max-len",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "comments": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "tabWidth": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "ignorePattern": {
                                    "type": "string"
                                },
                                "ignoreComments": {
                                    "type": "boolean"
                                },
                                "ignoreStrings": {
                                    "type": "boolean"
                                },
                                "ignoreUrls": {
                                    "type": "boolean"
                                },
                                "ignoreTemplateLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreRegExpLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreTrailingComments": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "comments": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "tabWidth": {
                                    "type": "integer",
                                    "minimum": 0
                                },
                                "ignorePattern": {
                                    "type": "string"
                                },
                                "ignoreComments": {
                                    "type": "boolean"
                                },
                                "ignoreStrings": {
                                    "type": "boolean"
                                },
                                "ignoreUrls": {
                                    "type": "boolean"
                                },
                                "ignoreTemplateLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreRegExpLiterals": {
                                    "type": "boolean"
                                },
                                "ignoreTrailingComments": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "integer",
                            "minimum": 0
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "comments": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "tabWidth": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "ignoreComments": {
                            "type": "boolean"
                        },
                        "ignoreStrings": {
                            "type": "boolean"
                        },
                        "ignoreUrls": {
                            "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                            "type": "boolean"
                        },
                        "ignoreRegExpLiterals": {
                            "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-18T17:26:01.080Z",
            "note": null
        },
        {
            "name": "@stylistic/max-statements-per-line",
            "description": "Enforce a maximum number of statements allowed per line",
            "url": "https://eslint.style/rules/js/max-statements-per-line",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "minimum": 1,
                            "default": 1
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/member-delimiter-style",
            "description": "Require a specific member delimiter style for interfaces and type literals",
            "url": "https://eslint.style/rules/ts/member-delimiter-style",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "multiLineOption": {
                            "type": "string",
                            "enum": [
                                "none",
                                "semi",
                                "comma"
                            ]
                        },
                        "singleLineOption": {
                            "type": "string",
                            "enum": [
                                "semi",
                                "comma"
                            ]
                        },
                        "delimiterConfig": {
                            "type": "object",
                            "properties": {
                                "multiline": {
                                    "type": "object",
                                    "properties": {
                                        "delimiter": {
                                            "$ref": "#/items/0/$defs/multiLineOption"
                                        },
                                        "requireLast": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "singleline": {
                                    "type": "object",
                                    "properties": {
                                        "delimiter": {
                                            "$ref": "#/items/0/$defs/singleLineOption"
                                        },
                                        "requireLast": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "type": "object",
                    "properties": {
                        "multiline": {
                            "type": "object",
                            "properties": {
                                "delimiter": {
                                    "$ref": "#/items/0/$defs/multiLineOption"
                                },
                                "requireLast": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "singleline": {
                            "type": "object",
                            "properties": {
                                "delimiter": {
                                    "$ref": "#/items/0/$defs/singleLineOption"
                                },
                                "requireLast": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "interface": {
                                    "$ref": "#/items/0/$defs/delimiterConfig"
                                },
                                "typeLiteral": {
                                    "$ref": "#/items/0/$defs/delimiterConfig"
                                }
                            },
                            "additionalProperties": false
                        },
                        "multilineDetection": {
                            "type": "string",
                            "enum": [
                                "brackets",
                                "last-member"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "multiline": {
                        "delimiter": "semi",
                        "requireLast": true
                    },
                    "singleline": {
                        "delimiter": "comma",
                        "requireLast": false
                    },
                    "multilineDetection": "brackets"
                }
            ],
            "updatedAt": "2024-01-18T17:28:01.162Z",
            "note": null
        },
        {
            "name": "@stylistic/multiline-ternary",
            "description": "Enforce newlines between operands of ternary expressions",
            "url": "https://eslint.style/rules/js/multiline-ternary",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "always-multiline",
                        "never"
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "always-multiline"
            ],
            "updatedAt": "2024-01-18T17:29:56.178Z",
            "note": null
        },
        {
            "name": "@stylistic/new-parens",
            "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
            "url": "https://eslint.style/rules/js/new-parens",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/newline-per-chained-call",
            "description": "Require a newline after each call in a method chain",
            "url": "https://eslint.style/rules/js/newline-per-chained-call",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "ignoreChainWithDepth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10,
                            "default": 2
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-confusing-arrow",
            "description": "Disallow arrow functions where they could be confused with comparisons",
            "url": "https://eslint.style/rules/js/no-confusing-arrow",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowParens": {
                            "type": "boolean",
                            "default": true
                        },
                        "onlyOneSimpleParam": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-extra-parens",
            "description": "Disallow unnecessary parentheses",
            "url": "https://eslint.style/rules/ts/no-extra-parens",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "functions"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "all"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "conditionalAssign": {
                                        "type": "boolean"
                                    },
                                    "ternaryOperandBinaryExpressions": {
                                        "type": "boolean"
                                    },
                                    "nestedBinaryExpressions": {
                                        "type": "boolean"
                                    },
                                    "returnAssign": {
                                        "type": "boolean"
                                    },
                                    "ignoreJSX": {
                                        "type": "string",
                                        "enum": [
                                            "none",
                                            "all",
                                            "single-line",
                                            "multi-line"
                                        ]
                                    },
                                    "enforceForArrowConditionals": {
                                        "type": "boolean"
                                    },
                                    "enforceForSequenceExpressions": {
                                        "type": "boolean"
                                    },
                                    "enforceForNewInMemberExpressions": {
                                        "type": "boolean"
                                    },
                                    "enforceForFunctionPrototypeMethods": {
                                        "type": "boolean"
                                    },
                                    "allowParensAfterCommentPattern": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-extra-semi",
            "description": "Disallow unnecessary semicolons",
            "url": "https://eslint.style/rules/ts/no-extra-semi",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-floating-decimal",
            "description": "Disallow leading or trailing decimal points in numeric literals",
            "url": "https://eslint.style/rules/js/no-floating-decimal",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-mixed-operators",
            "description": "Disallow mixed binary operators",
            "url": "https://eslint.style/rules/js/no-mixed-operators",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "groups": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "+",
                                        "-",
                                        "*",
                                        "/",
                                        "%",
                                        "**",
                                        "&",
                                        "|",
                                        "^",
                                        "~",
                                        "<<",
                                        ">>",
                                        ">>>",
                                        "==",
                                        "!=",
                                        "===",
                                        "!==",
                                        ">",
                                        ">=",
                                        "<",
                                        "<=",
                                        "&&",
                                        "||",
                                        "in",
                                        "instanceof",
                                        "?:",
                                        "??"
                                    ]
                                },
                                "minItems": 2,
                                "uniqueItems": true
                            },
                            "uniqueItems": true
                        },
                        "allowSamePrecedence": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-mixed-spaces-and-tabs",
            "description": "Disallow mixed spaces and tabs for indentation",
            "url": "https://eslint.style/rules/js/no-mixed-spaces-and-tabs",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "smart-tabs"
                            ]
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-multi-spaces",
            "description": "Disallow multiple spaces",
            "url": "https://eslint.style/rules/js/no-multi-spaces",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "object",
                            "patternProperties": {
                                "^([A-Z][a-z]*)+$": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        },
                        "ignoreEOLComments": {
                            "type": "boolean",
                            "default": false
                        },
                        "includeTabs": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-multiple-empty-lines",
            "description": "Disallow multiple empty lines",
            "url": "https://eslint.style/rules/js/no-multiple-empty-lines",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "maxEOF": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "maxBOF": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    "required": [
                        "max"
                    ],
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-tabs",
            "description": "Disallow all tabs",
            "url": "https://eslint.style/rules/js/no-tabs",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": null,
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowIndentationTabs": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-trailing-spaces",
            "description": "Disallow trailing whitespace at the end of lines",
            "url": "https://eslint.style/rules/js/no-trailing-spaces",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "skipBlankLines": {
                            "type": "boolean",
                            "default": false
                        },
                        "ignoreComments": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/no-whitespace-before-property",
            "description": "Disallow whitespace before properties",
            "url": "https://eslint.style/rules/js/no-whitespace-before-property",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/nonblock-statement-body-position",
            "description": "Enforce the location of single-line statements",
            "url": "https://eslint.style/rules/js/nonblock-statement-body-position",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "beside",
                        "below",
                        "any"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "if": {
                                    "type": "string",
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "else": {
                                    "type": "string",
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "while": {
                                    "type": "string",
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "do": {
                                    "type": "string",
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                },
                                "for": {
                                    "type": "string",
                                    "enum": [
                                        "beside",
                                        "below",
                                        "any"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/object-curly-newline",
            "description": "Enforce consistent line breaks after opening and before closing braces",
            "url": "https://eslint.style/rules/js/object-curly-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "multiline": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "integer",
                                            "minimum": 0
                                        },
                                        "consistent": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "ObjectExpression": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                },
                                "ObjectPattern": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                },
                                "ImportDeclaration": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                },
                                "ExportDeclaration": {
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "always",
                                                "never"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "multiline": {
                                                    "type": "boolean"
                                                },
                                                "minProperties": {
                                                    "type": "integer",
                                                    "minimum": 0
                                                },
                                                "consistent": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "minProperties": 1
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                        }
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                {
                    "consistent": true
                }
            ],
            "updatedAt": "2024-01-18T17:42:36.981Z",
            "note": null
        },
        {
            "name": "@stylistic/object-curly-spacing",
            "description": "Enforce consistent spacing inside braces",
            "url": "https://eslint.style/rules/ts/object-curly-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "arraysInObjects": {
                            "type": "boolean"
                        },
                        "objectsInObjects": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/object-property-newline",
            "description": "Enforce placing object properties on separate lines",
            "url": "https://eslint.style/rules/js/object-property-newline",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "allowAllPropertiesOnSameLine": {
                            "type": "boolean",
                            "default": false
                        },
                        "allowMultiplePropertiesPerLine": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/one-var-declaration-per-line",
            "description": "Require or disallow newlines around variable declarations",
            "url": "https://eslint.style/rules/js/one-var-declaration-per-line",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "initializations"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/operator-linebreak",
            "description": "Enforce consistent linebreak style for operators",
            "url": "https://eslint.style/rules/js/operator-linebreak",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "after",
                                "before",
                                "none"
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "overrides": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "enum": [
                                    "after",
                                    "before",
                                    "none",
                                    "ignore"
                                ]
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/padded-blocks",
            "description": "Require or disallow padding within blocks",
            "url": "https://eslint.style/rules/js/padded-blocks",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "blocks": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                "switches": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                "classes": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                        }
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "allowSingleLineBlocks": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/padding-line-between-statements",
            "description": "Require or disallow padding lines between statements",
            "url": "https://eslint.style/rules/ts/padding-line-between-statements",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "$defs": {
                    "paddingType": {
                        "type": "string",
                        "enum": [
                            "any",
                            "never",
                            "always"
                        ]
                    },
                    "statementType": {
                        "anyOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "*",
                                    "block-like",
                                    "exports",
                                    "require",
                                    "directive",
                                    "expression",
                                    "iife",
                                    "multiline-block-like",
                                    "multiline-expression",
                                    "multiline-const",
                                    "multiline-let",
                                    "multiline-var",
                                    "singleline-const",
                                    "singleline-let",
                                    "singleline-var",
                                    "block",
                                    "empty",
                                    "function",
                                    "break",
                                    "case",
                                    "class",
                                    "const",
                                    "continue",
                                    "debugger",
                                    "default",
                                    "do",
                                    "export",
                                    "for",
                                    "if",
                                    "import",
                                    "let",
                                    "return",
                                    "switch",
                                    "throw",
                                    "try",
                                    "var",
                                    "while",
                                    "with",
                                    "cjs-export",
                                    "cjs-import",
                                    "interface",
                                    "type",
                                    "function-overload"
                                ]
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "*",
                                        "block-like",
                                        "exports",
                                        "require",
                                        "directive",
                                        "expression",
                                        "iife",
                                        "multiline-block-like",
                                        "multiline-expression",
                                        "multiline-const",
                                        "multiline-let",
                                        "multiline-var",
                                        "singleline-const",
                                        "singleline-let",
                                        "singleline-var",
                                        "block",
                                        "empty",
                                        "function",
                                        "break",
                                        "case",
                                        "class",
                                        "const",
                                        "continue",
                                        "debugger",
                                        "default",
                                        "do",
                                        "export",
                                        "for",
                                        "if",
                                        "import",
                                        "let",
                                        "return",
                                        "switch",
                                        "throw",
                                        "try",
                                        "var",
                                        "while",
                                        "with",
                                        "cjs-export",
                                        "cjs-import",
                                        "interface",
                                        "type",
                                        "function-overload"
                                    ]
                                },
                                "minItems": 1,
                                "uniqueItems": true,
                                "additionalItems": false
                            }
                        ]
                    }
                },
                "type": "array",
                "additionalItems": false,
                "items": {
                    "type": "object",
                    "properties": {
                        "blankLine": {
                            "$ref": "#/$defs/paddingType"
                        },
                        "prev": {
                            "$ref": "#/$defs/statementType"
                        },
                        "next": {
                            "$ref": "#/$defs/statementType"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "blankLine",
                        "prev",
                        "next"
                    ]
                }
            },
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/quote-props",
            "description": "Require quotes around object literal property names",
            "url": "https://eslint.style/rules/js/quote-props",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "always",
                                    "as-needed",
                                    "consistent",
                                    "consistent-as-needed"
                                ]
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 1
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "always",
                                    "as-needed",
                                    "consistent",
                                    "consistent-as-needed"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "keywords": {
                                        "type": "boolean"
                                    },
                                    "unnecessary": {
                                        "type": "boolean"
                                    },
                                    "numbers": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "consistent-as-needed"
            ],
            "updatedAt": "2024-01-18T17:48:12.808Z",
            "note": null
        },
        {
            "name": "@stylistic/quotes",
            "description": "Enforce the consistent use of either backticks, double, or single quotes",
            "url": "https://eslint.style/rules/ts/quotes",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "single",
                        "double",
                        "backtick"
                    ]
                },
                {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "avoid-escape"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "avoidEscape": {
                                    "type": "boolean"
                                },
                                "allowTemplateLiterals": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "single",
                {
                    "allowTemplateLiterals": true
                }
            ],
            "updatedAt": "2024-01-18T17:49:53.785Z",
            "note": null
        },
        {
            "name": "@stylistic/rest-spread-spacing",
            "description": "Enforce spacing between rest and spread operators and their expressions",
            "url": "https://eslint.style/rules/js/rest-spread-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/semi",
            "description": "Require or disallow semicolons instead of ASI",
            "url": "https://eslint.style/rules/ts/semi",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "beforeStatementContinuationChars": {
                                        "type": "string",
                                        "enum": [
                                            "always",
                                            "any",
                                            "never"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    },
                    {
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "always"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "omitLastInOneLineBlock": {
                                        "type": "boolean"
                                    },
                                    "omitLastInOneLineClassBody": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "minItems": 0,
                        "maxItems": 2
                    }
                ]
            },
            "errorLevel": 1,
            "handledByTypescript": false,
            "config": [
                "always",
                {
                    "omitLastInOneLineBlock": false,
                    "omitLastInOneLineClassBody": false
                }
            ],
            "updatedAt": "2024-01-18T20:58:00.885Z",
            "note": null
        },
        {
            "name": "@stylistic/semi-spacing",
            "description": "Enforce consistent spacing before and after semicolons",
            "url": "https://eslint.style/rules/js/semi-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": false
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/semi-style",
            "description": "Enforce location of semicolons",
            "url": "https://eslint.style/rules/js/semi-style",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "last",
                        "first"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/space-before-blocks",
            "description": "Enforce consistent spacing before blocks",
            "url": "https://eslint.style/rules/ts/space-before-blocks",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "keywords": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                },
                                "functions": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                },
                                "classes": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "off"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/space-before-function-paren",
            "description": "Enforce consistent spacing before function parenthesis",
            "url": "https://eslint.style/rules/ts/space-before-function-paren",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "always",
                                "never"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "anonymous": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "named": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                },
                                "asyncArrow": {
                                    "type": "string",
                                    "enum": [
                                        "always",
                                        "never",
                                        "ignore"
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/space-in-parens",
            "description": "Enforce consistent spacing inside parentheses",
            "url": "https://eslint.style/rules/js/space-in-parens",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "{}",
                                    "[]",
                                    "()",
                                    "empty"
                                ]
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/space-infix-ops",
            "description": "Require spacing around infix operators",
            "url": "https://eslint.style/rules/ts/space-infix-ops",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "int32Hint": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/space-unary-ops",
            "description": "Enforce consistent spacing before or after unary operators",
            "url": "https://eslint.style/rules/js/space-unary-ops",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "words": {
                            "type": "boolean",
                            "default": true
                        },
                        "nonwords": {
                            "type": "boolean",
                            "default": false
                        },
                        "overrides": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/spaced-comment",
            "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
            "url": "https://eslint.style/rules/js/spaced-comment",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "exceptions": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "markers": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "line": {
                            "type": "object",
                            "properties": {
                                "exceptions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "markers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "additionalProperties": false
                        },
                        "block": {
                            "type": "object",
                            "properties": {
                                "exceptions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "markers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "balanced": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/switch-colon-spacing",
            "description": "Enforce spacing around colons of switch statements",
            "url": "https://eslint.style/rules/js/switch-colon-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean",
                            "default": false
                        },
                        "after": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/template-curly-spacing",
            "description": "Require or disallow spacing around embedded expressions of template strings",
            "url": "https://eslint.style/rules/js/template-curly-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/template-tag-spacing",
            "description": "Require or disallow spacing between template tags and their literals",
            "url": "https://eslint.style/rules/js/template-tag-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/type-annotation-spacing",
            "description": "Require consistent spacing around type annotations",
            "url": "https://eslint.style/rules/ts/type-annotation-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "$defs": {
                        "spacingConfig": {
                            "type": "object",
                            "properties": {
                                "before": {
                                    "type": "boolean"
                                },
                                "after": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "type": "object",
                    "properties": {
                        "before": {
                            "type": "boolean"
                        },
                        "after": {
                            "type": "boolean"
                        },
                        "overrides": {
                            "type": "object",
                            "properties": {
                                "colon": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "arrow": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "variable": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "parameter": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "property": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                },
                                "returnType": {
                                    "$ref": "#/items/0/$defs/spacingConfig"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/type-generic-spacing",
            "description": "Enforces consistent spacing inside TypeScript type generics",
            "url": "https://eslint.style/rules/plus/type-generic-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/type-named-tuple-spacing",
            "description": "Expect space before the type declaration in the named tuple",
            "url": "https://eslint.style/rules/plus/type-named-tuple-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": "stylistic",
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/wrap-iife",
            "description": "Require parentheses around immediate `function` invocations",
            "url": "https://eslint.style/rules/js/wrap-iife",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "type": "string",
                    "enum": [
                        "outside",
                        "inside",
                        "any"
                    ]
                },
                {
                    "type": "object",
                    "properties": {
                        "functionPrototypeMethods": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/wrap-regex",
            "description": "Require parenthesis around regex literals",
            "url": "https://eslint.style/rules/js/wrap-regex",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "code",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        },
        {
            "name": "@stylistic/yield-star-spacing",
            "description": "Require or disallow spacing around the `*` in `yield*` expressions",
            "url": "https://eslint.style/rules/js/yield-star-spacing",
            "library": "@stylistic/eslint-plugin",
            "type": "layout",
            "fixable": "whitespace",
            "deprecated": false,
            "recommended": false,
            "hasSuggestions": false,
            "extendsBaseRule": false,
            "requiresTypeChecking": false,
            "replacedBy": [],
            "schema": [
                {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": [
                                "before",
                                "after",
                                "both",
                                "neither"
                            ]
                        },
                        {
                            "type": "object",
                            "properties": {
                                "before": {
                                    "type": "boolean"
                                },
                                "after": {
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            ],
            "errorLevel": 0,
            "handledByTypescript": false,
            "config": [],
            "updatedAt": "2024-01-14T00:36:03.665Z",
            "note": null
        }
    ]
}